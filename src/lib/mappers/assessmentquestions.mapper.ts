// Auto-generated mappers for AssessmentQuestions
// Generated at: 2025-10-06T21:02:35.490Z
// This file is automatically generated - do not edit manually

import type {
  AssessmentQuestionCreate,
  AssessmentQuestionResponse,
  AssessmentQuestionUpdate,
} from '@/lib/contracts';
import type { assessmentQuestions } from '@/lib/database';

// Drizzle inferred types
type AssessmentQuestionsSelect = typeof assessmentQuestions.$inferSelect;
type AssessmentQuestionsInsert = typeof assessmentQuestions.$inferInsert;
type AssessmentQuestionsUpdate = typeof assessmentQuestions.$inferInsert;

// Transform AssessmentQuestionCreate to AssessmentQuestionsInsert
export function fromCreateAssessmentQuestionDTO(
  input: AssessmentQuestionCreate
): AssessmentQuestionsInsert {
  return {
    assessmentId: input.assessmentId,
    questionText: input.questionText,
    questionType: input.questionType,
    orderIndex: input.orderIndex,
    isRequired: input.isRequired,
    category: input.category,
    weight: input.weight,
    reverseScored: input.reverseScored,
    apestDimension: input.apestDimension,
    answerOptions: input.answerOptions,
  };
}

// Transform AssessmentQuestionUpdate to AssessmentQuestionsUpdate
export function fromUpdateAssessmentQuestionDTO(
  input: AssessmentQuestionUpdate
): AssessmentQuestionsUpdate {
  return {
    assessmentId: input.assessmentId,
    questionText: input.questionText,
    questionType: input.questionType,
    orderIndex: input.orderIndex,
    isRequired: input.isRequired,
    category: input.category,
    weight: input.weight,
    reverseScored: input.reverseScored,
    apestDimension: input.apestDimension,
    answerOptions: input.answerOptions,
    updatedAt: input.updatedAt ? new Date(input.updatedAt) : new Date(),
  };
}

// Transform AssessmentQuestionsSelect to AssessmentQuestionResponse
export function toAssessmentQuestionDTO(
  row: AssessmentQuestionsSelect
): AssessmentQuestionResponse {
  return {
    id: row.id,
    assessmentId: row.assessmentId,
    questionText: row.questionText,
    questionType: row.questionType,
    orderIndex: row.orderIndex,
    isRequired: row.isRequired,
    category: row.category,
    weight: row.weight,
    reverseScored: row.reverseScored,
    apestDimension: row.apestDimension,
    answerOptions: row.answerOptions,
    createdAt: normalizeDate(row.createdAt) || '',
    updatedAt: normalizeDate(row.updatedAt) || '',
  };
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

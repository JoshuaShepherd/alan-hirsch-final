// Auto-generated mappers for SubscriptionPlans
// Generated at: 2025-10-06T21:02:35.491Z
// This file is automatically generated - do not edit manually

import {
  SubscriptionPlanCreateDTO,
  SubscriptionPlanResponseDTO,
  SubscriptionPlanUpdateDTO,
} from '@/lib/contracts';
import type { subscriptionPlans } from '@/lib/database';
import { z } from 'zod';

// Drizzle inferred types
type SubscriptionPlansSelect = typeof subscriptionPlans.$inferSelect;
type SubscriptionPlansInsert = typeof subscriptionPlans.$inferInsert;
type SubscriptionPlansUpdate = typeof subscriptionPlans.$inferInsert;

// Transform SubscriptionPlanCreateDTO to SubscriptionPlansInsert
export function fromCreateSubscriptionPlanDTO(
  input: z.infer<typeof SubscriptionPlanCreateDTO>
): SubscriptionPlansInsert {
  return {
    name: input.name,
    slug: input.slug,
    description: input.description,
    planType: input.planType,
    priceMonthly: input.priceMonthly,
    priceAnnual: input.priceAnnual,
    currency: input.currency,
    contentAccessLevel: input.contentAccessLevel,
    features: input.features,
    maxUsers: input.maxUsers,
    storageLimit: input.storageLimit,
    bandwidthLimit: input.bandwidthLimit,
    stripeProductId: input.stripeProductId,
    stripePriceIdMonthly: input.stripePriceIdMonthly,
    stripePriceIdAnnual: input.stripePriceIdAnnual,
    isActive: input.isActive,
    isPopular: input.isPopular,
    sortOrder: input.sortOrder,
    trialDays: input.trialDays,
  };
}

// Transform SubscriptionPlanUpdateDTO to SubscriptionPlansUpdate
export function fromUpdateSubscriptionPlanDTO(
  input: z.infer<typeof SubscriptionPlanUpdateDTO>
): SubscriptionPlansUpdate {
  return {
    name: input.name,
    slug: input.slug,
    description: input.description,
    planType: input.planType,
    priceMonthly: input.priceMonthly,
    priceAnnual: input.priceAnnual,
    currency: input.currency,
    contentAccessLevel: input.contentAccessLevel,
    features: input.features,
    maxUsers: input.maxUsers,
    storageLimit: input.storageLimit,
    bandwidthLimit: input.bandwidthLimit,
    stripeProductId: input.stripeProductId,
    stripePriceIdMonthly: input.stripePriceIdMonthly,
    stripePriceIdAnnual: input.stripePriceIdAnnual,
    isActive: input.isActive,
    isPopular: input.isPopular,
    sortOrder: input.sortOrder,
    trialDays: input.trialDays,
    updatedAt: input.updatedAt ? new Date(input.updatedAt) : new Date(),
  };
}

// Transform SubscriptionPlansSelect to SubscriptionPlanResponseDTO
export function toSubscriptionPlanDTO(
  row: SubscriptionPlansSelect
): z.infer<typeof SubscriptionPlanResponseDTO> {
  return {
    id: row.id,
    name: row.name,
    slug: row.slug,
    description: row.description,
    planType: row.planType,
    priceMonthly: row.priceMonthly,
    priceAnnual: row.priceAnnual,
    currency: row.currency,
    contentAccessLevel: row.contentAccessLevel,
    features: row.features,
    maxUsers: row.maxUsers,
    storageLimit: row.storageLimit,
    bandwidthLimit: row.bandwidthLimit,
    stripeProductId: row.stripeProductId,
    stripePriceIdMonthly: row.stripePriceIdMonthly,
    stripePriceIdAnnual: row.stripePriceIdAnnual,
    isActive: row.isActive,
    isPopular: row.isPopular,
    sortOrder: row.sortOrder,
    trialDays: row.trialDays,
    createdAt: normalizeDate(row.createdAt) || '',
    updatedAt: normalizeDate(row.updatedAt) || '',
  };
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

// Auto-generated mappers for ApiKeys
// Generated at: 2025-10-06T17:55:56.827Z
// This file is automatically generated - do not edit manually

import { z } from 'zod';
import type {
  ApiKeysSelect,
  ApiKeysInsert,
  ApiKeysUpdate,
} from '@/lib/types';

// Transform ApiKeys from database to API format
export function apiKeysToApi(dbData: ApiKeysSelect): ApiKeysSelect {
  return {
    id: dbData.id,
    userId: dbData.userId,
    name: dbData.name,
    keyHash: dbData.keyHash,
    keyPrefix: dbData.keyPrefix,
    scopes: dbData.scopes,
    permissions: dbData.permissions,
    rateLimit: dbData.rateLimit,
    usageCount: dbData.usageCount,
    isActive: dbData.isActive,
    expiresAt: dbData.expiresAt,
    lastUsedAt: dbData.lastUsedAt,
    lastUsedIp: dbData.lastUsedIp,
    createdAt: dbData.createdAt,
    updatedAt: dbData.updatedAt
  };
}

// Transform ApiKeys from API to database format
export function apiKeysFromApi(apiData: ApiKeysInsert): ApiKeysInsert {
  return {
    userId: apiData.userId,
    name: apiData.name,
    keyHash: apiData.keyHash,
    keyPrefix: apiData.keyPrefix,
    scopes: apiData.scopes,
    permissions: apiData.permissions,
    rateLimit: apiData.rateLimit,
    usageCount: apiData.usageCount,
    isActive: apiData.isActive,
    expiresAt: apiData.expiresAt,
    lastUsedAt: apiData.lastUsedAt,
    lastUsedIp: apiData.lastUsedIp
  };
}

// Transform ApiKeys from API to database update format
export function apiKeysFromUpdate(apiData: ApiKeysUpdate): ApiKeysUpdate {
  return {
    userId: apiData.userId,
    name: apiData.name,
    keyHash: apiData.keyHash,
    keyPrefix: apiData.keyPrefix,
    scopes: apiData.scopes,
    permissions: apiData.permissions,
    rateLimit: apiData.rateLimit,
    usageCount: apiData.usageCount,
    isActive: apiData.isActive,
    expiresAt: apiData.expiresAt,
    lastUsedAt: apiData.lastUsedAt,
    lastUsedIp: apiData.lastUsedIp
  };
}

// Array mappers
export function apiKeysArrayToApi(data: ApiKeysSelect[]): ApiKeysSelect[] {
  return data.map(item => apiKeysToApi(item));
}

export function apiKeysArrayFromApi(data: ApiKeysInsert[]): ApiKeysInsert[] {
  return data.map(item => apiKeysFromApi(item));
}

// Legacy exports for backward compatibility
export const toApiKeyDTO = apiKeysToApi;
export const fromCreateApiKeyDTO = apiKeysFromApi;
export const fromUpdateApiKeyDTO = apiKeysFromUpdate;

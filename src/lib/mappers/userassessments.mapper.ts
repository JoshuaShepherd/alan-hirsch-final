// Auto-generated mappers for UserAssessments
// Generated at: 2025-10-06T21:02:35.490Z
// This file is automatically generated - do not edit manually

import type {
  UserAssessmentCreate,
  UserAssessmentResponse,
  UserAssessmentUpdate,
} from '@/lib/contracts';
import type { userAssessments } from '@/lib/database';

// Drizzle inferred types
type UserAssessmentsSelect = typeof userAssessments.$inferSelect;
type UserAssessmentsInsert = typeof userAssessments.$inferInsert;
type UserAssessmentsUpdate = typeof userAssessments.$inferInsert;

// Transform UserAssessmentCreate to UserAssessmentsInsert
export function fromCreateUserAssessmentDTO(
  input: UserAssessmentCreate
): UserAssessmentsInsert {
  return {
    userId: input.userId,
    assessmentId: input.assessmentId,
    startedAt: input.startedAt ? new Date(input.startedAt) : new Date(),
    completedAt: input.completedAt ? new Date(input.completedAt) : null,
    completionPercentage: input.completionPercentage,
    rawScores: input.rawScores,
    totalScore: input.totalScore,
    maxPossibleScore: input.maxPossibleScore,
    apostolicScore: input.apostolicScore,
    propheticScore: input.propheticScore,
    evangelisticScore: input.evangelisticScore,
    shepherdingScore: input.shepherdingScore,
    teachingScore: input.teachingScore,
    normalizedScores: input.normalizedScores,
    primaryGift: input.primaryGift,
    secondaryGift: input.secondaryGift,
    responseConsistency: input.responseConsistency,
    completionTime: input.completionTime,
    confidenceLevel: input.confidenceLevel,
    culturalAdjustmentApplied: input.culturalAdjustmentApplied,
    culturalAdjustmentFactor: input.culturalAdjustmentFactor,
    aiInsights: input.aiInsights,
    personalizedRecommendations: input.personalizedRecommendations,
    suggestedPeers: input.suggestedPeers,
    complementaryGifts: input.complementaryGifts,
  };
}

// Transform UserAssessmentUpdate to UserAssessmentsUpdate
export function fromUpdateUserAssessmentDTO(
  input: UserAssessmentUpdate
): UserAssessmentsUpdate {
  return {
    userId: input.userId,
    assessmentId: input.assessmentId,
    startedAt: input.startedAt ? new Date(input.startedAt) : undefined,
    completedAt: input.completedAt ? new Date(input.completedAt) : undefined,
    completionPercentage: input.completionPercentage,
    rawScores: input.rawScores,
    totalScore: input.totalScore,
    maxPossibleScore: input.maxPossibleScore,
    apostolicScore: input.apostolicScore,
    propheticScore: input.propheticScore,
    evangelisticScore: input.evangelisticScore,
    shepherdingScore: input.shepherdingScore,
    teachingScore: input.teachingScore,
    normalizedScores: input.normalizedScores,
    primaryGift: input.primaryGift,
    secondaryGift: input.secondaryGift,
    responseConsistency: input.responseConsistency,
    completionTime: input.completionTime,
    confidenceLevel: input.confidenceLevel,
    culturalAdjustmentApplied: input.culturalAdjustmentApplied,
    culturalAdjustmentFactor: input.culturalAdjustmentFactor,
    aiInsights: input.aiInsights,
    personalizedRecommendations: input.personalizedRecommendations,
    suggestedPeers: input.suggestedPeers,
    complementaryGifts: input.complementaryGifts,
    updatedAt: input.updatedAt ? new Date(input.updatedAt) : new Date(),
  };
}

// Transform UserAssessmentsSelect to UserAssessmentResponse
export function toUserAssessmentDTO(
  row: UserAssessmentsSelect
): UserAssessmentResponse {
  return {
    id: row.id,
    userId: row.userId,
    assessmentId: row.assessmentId,
    startedAt: normalizeDate(row.startedAt) || '',
    completedAt: normalizeDate(row.completedAt),
    completionPercentage: row.completionPercentage,
    rawScores: row.rawScores,
    totalScore: row.totalScore,
    maxPossibleScore: row.maxPossibleScore,
    apostolicScore: row.apostolicScore,
    propheticScore: row.propheticScore,
    evangelisticScore: row.evangelisticScore,
    shepherdingScore: row.shepherdingScore,
    teachingScore: row.teachingScore,
    normalizedScores: row.normalizedScores,
    primaryGift: row.primaryGift,
    secondaryGift: row.secondaryGift,
    responseConsistency: row.responseConsistency,
    completionTime: row.completionTime,
    confidenceLevel: row.confidenceLevel,
    culturalAdjustmentApplied: row.culturalAdjustmentApplied,
    culturalAdjustmentFactor: row.culturalAdjustmentFactor,
    aiInsights: row.aiInsights,
    personalizedRecommendations: row.personalizedRecommendations,
    suggestedPeers: row.suggestedPeers,
    complementaryGifts: row.complementaryGifts,
    createdAt: normalizeDate(row.createdAt) || '',
    updatedAt: normalizeDate(row.updatedAt) || '',
  };
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

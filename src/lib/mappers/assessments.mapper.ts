// Auto-generated mappers for Assessments
// Generated at: 2025-10-06T21:02:35.489Z
// This file is automatically generated - do not edit manually

import {
  AssessmentCreateDTO,
  AssessmentResponseDTO,
  AssessmentUpdateDTO,
} from '@/lib/contracts';
import type { assessments } from '@/lib/database';
import { z } from 'zod';

// Drizzle inferred types
type AssessmentsSelect = typeof assessments.$inferSelect;
type AssessmentsInsert = typeof assessments.$inferInsert;
type AssessmentsUpdate = typeof assessments.$inferInsert;

// Transform AssessmentCreateDTO to AssessmentsInsert
export function fromCreateAssessmentDTO(
  input: z.infer<typeof AssessmentCreateDTO>
): AssessmentsInsert {
  return {
    name: input.name,
    slug: input.slug,
    description: input.description,
    assessmentType: input.assessmentType,
    questionsCount: input.questionsCount,
    estimatedDuration: input.estimatedDuration,
    passingScore: input.passingScore,
    version: input.version,
    language: input.language,
    culturalAdaptation: input.culturalAdaptation,
    researchBacked: input.researchBacked,
    validityScore: input.validityScore,
    reliabilityScore: input.reliabilityScore,
    instructions: input.instructions,
    scoringMethod: input.scoringMethod,
    status: input.status,
    publishedAt: input.publishedAt ? new Date(input.publishedAt) : null,
  };
}

// Transform AssessmentUpdateDTO to AssessmentsUpdate
export function fromUpdateAssessmentDTO(
  input: z.infer<typeof AssessmentUpdateDTO>
): AssessmentsUpdate {
  return {
    name: input.name,
    slug: input.slug,
    description: input.description,
    assessmentType: input.assessmentType,
    questionsCount: input.questionsCount,
    estimatedDuration: input.estimatedDuration,
    passingScore: input.passingScore,
    version: input.version,
    language: input.language,
    culturalAdaptation: input.culturalAdaptation,
    researchBacked: input.researchBacked,
    validityScore: input.validityScore,
    reliabilityScore: input.reliabilityScore,
    instructions: input.instructions,
    scoringMethod: input.scoringMethod,
    status: input.status,
    publishedAt: input.publishedAt ? new Date(input.publishedAt) : undefined,
    updatedAt: input.updatedAt ? new Date(input.updatedAt) : new Date(),
  };
}

// Transform AssessmentsSelect to AssessmentResponseDTO
export function toAssessmentDTO(
  row: AssessmentsSelect
): z.infer<typeof AssessmentResponseDTO> {
  return {
    id: row.id,
    name: row.name,
    slug: row.slug,
    description: row.description,
    assessmentType: row.assessmentType,
    questionsCount: row.questionsCount,
    estimatedDuration: row.estimatedDuration,
    passingScore: row.passingScore,
    version: row.version,
    language: row.language,
    culturalAdaptation: row.culturalAdaptation,
    researchBacked: row.researchBacked,
    validityScore: row.validityScore,
    reliabilityScore: row.reliabilityScore,
    instructions: row.instructions,
    scoringMethod: row.scoringMethod,
    status: row.status,
    createdAt: normalizeDate(row.createdAt) || '',
    updatedAt: normalizeDate(row.updatedAt) || '',
    publishedAt: normalizeDate(row.publishedAt),
  };
}

// Array helper function
export function toAssessmentDTOs(
  rows: AssessmentsSelect[]
): z.infer<typeof AssessmentResponseDTO>[] {
  return rows.map(row => toAssessmentDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

// Auto-generated mappers for UserProfiles
// Generated at: 2025-01-27T10:00:00.000Z
// This file is automatically generated - do not edit manually

import type {
  UserProfileCreate,
  UserProfileResponse,
  UserProfileUpdate,
} from '@/lib/contracts';
import type { userProfiles } from '@/lib/database';

// Drizzle inferred types
type UserProfilesSelect = typeof userProfiles.$inferSelect;
type UserProfilesInsert = typeof userProfiles.$inferInsert;
type UserProfilesUpdate = typeof userProfiles.$inferInsert;

// Transform UserProfileCreate to UserProfilesInsert
export function fromCreateUserProfileDTO(
  input: UserProfileCreate
): UserProfilesInsert {
  return {
    firstName: input.firstName,
    lastName: input.lastName,
    email: input.email,
    displayName: input.displayName,
    avatarUrl: input.avatarUrl,
    bio: input.bio,
    website: input.website,
    location: input.location,
    timezone: input.timezone,
    language: input.language,
    dateOfBirth: input.dateOfBirth ? new Date(input.dateOfBirth) : null,
    phoneNumber: input.phoneNumber,
    isEmailVerified: input.isEmailVerified,
    isPhoneVerified: input.isPhoneVerified,
    lastActiveAt: input.lastActiveAt ? new Date(input.lastActiveAt) : null,
    preferences: input.preferences,
    status: input.status,
  };
}

// Transform UserProfileUpdate to UserProfilesUpdate with id
export function fromUpdateUserProfileDTO(input: UserProfileUpdate): {
  id: string;
  changes: UserProfilesUpdate;
} {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      firstName: changes.firstName,
      lastName: changes.lastName,
      email: changes.email,
      displayName: changes.displayName,
      avatarUrl: changes.avatarUrl,
      bio: changes.bio,
      website: changes.website,
      location: changes.location,
      timezone: changes.timezone,
      language: changes.language,
      dateOfBirth: changes.dateOfBirth
        ? new Date(changes.dateOfBirth)
        : undefined,
      phoneNumber: changes.phoneNumber,
      isEmailVerified: changes.isEmailVerified,
      isPhoneVerified: changes.isPhoneVerified,
      lastActiveAt: changes.lastActiveAt
        ? new Date(changes.lastActiveAt)
        : undefined,
      preferences: changes.preferences,
      status: changes.status,
      updatedAt: changes.updatedAt ? new Date(changes.updatedAt) : new Date(),
    },
  };
}

// Transform UserProfilesSelect to UserProfileResponse
export function toUserProfileDTO(row: UserProfilesSelect): UserProfileResponse {
  return {
    id: row.id,
    firstName: row.firstName,
    lastName: row.lastName,
    email: row.email,
    displayName: row.displayName,
    avatarUrl: row.avatarUrl,
    bio: row.bio,
    website: row.website,
    location: row.location,
    timezone: row.timezone,
    language: row.language,
    dateOfBirth: normalizeDate(row.dateOfBirth),
    phoneNumber: row.phoneNumber,
    isEmailVerified: row.isEmailVerified,
    isPhoneVerified: row.isPhoneVerified,
    lastActiveAt: normalizeDate(row.lastActiveAt),
    preferences: normalizeJsonb(row.preferences),
    status: row.status,
    createdAt: normalizeDate(row.createdAt),
    updatedAt: normalizeDate(row.updatedAt),
  };
}

// Array helper function
export function toUserProfileDTOs(
  rows: UserProfilesSelect[]
): UserProfileResponse[] {
  return rows.map(row => toUserProfileDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

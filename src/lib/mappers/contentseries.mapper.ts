// Auto-generated mappers for ContentSeries
// Generated at: 2025-10-06T21:02:35.490Z
// This file is automatically generated - do not edit manually

import type {
  ContentSeriesCreate,
  ContentSeriesResponse,
  ContentSeriesUpdate,
} from '@/lib/contracts';
import type { contentSeries } from '@/lib/database';

// Drizzle inferred types
type ContentSeriesSelect = typeof contentSeries.$inferSelect;
type ContentSeriesInsert = typeof contentSeries.$inferInsert;
type ContentSeriesUpdate = typeof contentSeries.$inferInsert;

// Transform ContentSeriesCreate to ContentSeriesInsert
export function fromCreateContentSeriesDTO(
  input: ContentSeriesCreate
): ContentSeriesInsert {
  return {
    title: input.title,
    slug: input.slug,
    description: input.description,
    excerpt: input.excerpt,
    authorId: input.authorId,
    collaborators: input.collaborators,
    seriesType: input.seriesType,
    difficulty: input.difficulty,
    totalItems: input.totalItems,
    estimatedDuration: input.estimatedDuration,
    primaryCategoryId: input.primaryCategoryId,
    tags: input.tags,
    visibility: input.visibility,
    status: input.status,
    featuredImageUrl: input.featuredImageUrl,
    metaDescription: input.metaDescription,
    publishedAt: input.publishedAt ? new Date(input.publishedAt) : null,
  };
}

// Transform ContentSeriesUpdate to ContentSeriesUpdate with id
export function fromUpdateContentSeriesDTO(input: ContentSeriesUpdate): {
  id: string;
  changes: ContentSeriesUpdate;
} {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      title: changes.title,
      slug: changes.slug,
      description: changes.description,
      excerpt: changes.excerpt,
      authorId: changes.authorId,
      collaborators: changes.collaborators,
      seriesType: changes.seriesType,
      difficulty: changes.difficulty,
      totalItems: changes.totalItems,
      estimatedDuration: changes.estimatedDuration,
      primaryCategoryId: changes.primaryCategoryId,
      tags: changes.tags,
      visibility: changes.visibility,
      status: changes.status,
      featuredImageUrl: changes.featuredImageUrl,
      metaDescription: changes.metaDescription,
      publishedAt: changes.publishedAt
        ? new Date(changes.publishedAt)
        : undefined,
      updatedAt: changes.updatedAt ? new Date(changes.updatedAt) : new Date(),
    },
  };
}

// Transform ContentSeriesSelect to ContentSeriesResponse
export function toContentSeriesDTO(
  row: ContentSeriesSelect
): ContentSeriesResponse {
  return {
    id: row.id,
    title: row.title,
    slug: row.slug,
    description: row.description,
    excerpt: row.excerpt,
    authorId: row.authorId,
    collaborators: normalizeJsonb(row.collaborators),
    seriesType: row.seriesType,
    difficulty: row.difficulty,
    totalItems: row.totalItems,
    estimatedDuration: row.estimatedDuration,
    primaryCategoryId: row.primaryCategoryId,
    tags: normalizeJsonb(row.tags),
    visibility: row.visibility,
    status: row.status,
    featuredImageUrl: row.featuredImageUrl,
    metaDescription: row.metaDescription,
    createdAt: normalizeDate(row.createdAt),
    updatedAt: normalizeDate(row.updatedAt),
    publishedAt: normalizeDate(row.publishedAt),
  };
}

// Array helper function
export function toContentSeriesDTOs(
  rows: ContentSeriesSelect[]
): ContentSeriesResponse[] {
  return rows.map(row => toContentSeriesDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

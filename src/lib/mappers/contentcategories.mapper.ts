// Auto-generated mappers for ContentCategories
// Generated at: 2025-10-06T21:02:35.490Z
// This file is automatically generated - do not edit manually

import type {
  ContentCategoryCreate,
  ContentCategoryResponse,
  ContentCategoryUpdate,
} from '@/lib/contracts';
import type { contentCategories } from '@/lib/database';

// Drizzle inferred types
type ContentCategoriesSelect = typeof contentCategories.$inferSelect;
type ContentCategoriesInsert = typeof contentCategories.$inferInsert;
type ContentCategoriesUpdate = typeof contentCategories.$inferInsert;

// Transform ContentCategoryCreate to ContentCategoriesInsert
export function fromCreateContentCategoryDTO(
  input: ContentCategoryCreate
): ContentCategoriesInsert {
  return {
    name: input.name,
    slug: input.slug,
    description: input.description,
    parentId: input.parentId,
    orderIndex: input.orderIndex,
    theologicalDiscipline: input.theologicalDiscipline,
    movementRelevanceScore: input.movementRelevanceScore,
    apestRelevance: input.apestRelevance,
    metaDescription: input.metaDescription,
    keywords: input.keywords,
    isActive: input.isActive,
  };
}

// Transform ContentCategoryUpdate to ContentCategoriesUpdate with id
export function fromUpdateContentCategoryDTO(input: ContentCategoryUpdate): {
  id: string;
  changes: ContentCategoriesUpdate;
} {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      name: changes.name,
      slug: changes.slug,
      description: changes.description,
      parentId: changes.parentId,
      orderIndex: changes.orderIndex,
      theologicalDiscipline: changes.theologicalDiscipline,
      movementRelevanceScore: changes.movementRelevanceScore,
      apestRelevance: changes.apestRelevance,
      metaDescription: changes.metaDescription,
      keywords: changes.keywords,
      isActive: changes.isActive,
      updatedAt: changes.updatedAt ? new Date(changes.updatedAt) : new Date(),
    },
  };
}

// Transform ContentCategoriesSelect to ContentCategoryResponse
export function toContentCategoryDTO(
  row: ContentCategoriesSelect
): ContentCategoryResponse {
  return {
    id: row.id,
    name: row.name,
    slug: row.slug,
    description: row.description,
    parentId: row.parentId,
    orderIndex: row.orderIndex,
    theologicalDiscipline: row.theologicalDiscipline,
    movementRelevanceScore: row.movementRelevanceScore,
    apestRelevance: normalizeJsonb(row.apestRelevance),
    metaDescription: row.metaDescription,
    keywords: normalizeJsonb(row.keywords),
    isActive: row.isActive,
    createdAt: normalizeDate(row.createdAt),
    updatedAt: normalizeDate(row.updatedAt),
  };
}

// Array helper function
export function toContentCategoryDTOs(
  rows: ContentCategoriesSelect[]
): ContentCategoryResponse[] {
  return rows.map(row => toContentCategoryDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

// Auto-generated mappers for ContentCrossReferences
// Generated at: 2025-10-06T21:02:35.491Z
// This file is automatically generated - do not edit manually

import type {
  ContentCrossReferenceCreate,
  ContentCrossReferenceResponse,
  ContentCrossReferenceUpdate,
} from '@/lib/contracts';
import type { contentCrossReferences } from '@/lib/database';

// Drizzle inferred types
type ContentCrossReferencesSelect = typeof contentCrossReferences.$inferSelect;
type ContentCrossReferencesInsert = typeof contentCrossReferences.$inferInsert;
type ContentCrossReferencesUpdate = typeof contentCrossReferences.$inferInsert;

// Transform ContentCrossReferenceCreate to ContentCrossReferencesInsert
export function fromCreateContentCrossReferenceDTO(
  input: ContentCrossReferenceCreate
): ContentCrossReferencesInsert {
  return {
    sourceContentId: input.sourceContentId,
    targetContentId: input.targetContentId,
    referenceType: input.referenceType,
    relevanceScore: input.relevanceScore,
    qualityScore: input.qualityScore,
    contextDescription: input.contextDescription,
    isAuthorApproved: input.isAuthorApproved,
    isAiGenerated: input.isAiGenerated,
    clickCount: input.clickCount,
  };
}

// Transform ContentCrossReferenceUpdate to ContentCrossReferencesUpdate with id
export function fromUpdateContentCrossReferenceDTO(
  input: ContentCrossReferenceUpdate
): { id: string; changes: ContentCrossReferencesUpdate } {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      sourceContentId: changes.sourceContentId,
      targetContentId: changes.targetContentId,
      referenceType: changes.referenceType,
      relevanceScore: changes.relevanceScore,
      qualityScore: changes.qualityScore,
      contextDescription: changes.contextDescription,
      isAuthorApproved: changes.isAuthorApproved,
      isAiGenerated: changes.isAiGenerated,
      clickCount: changes.clickCount,
      updatedAt: changes.updatedAt ? new Date(changes.updatedAt) : new Date(),
    },
  };
}

// Transform ContentCrossReferencesSelect to ContentCrossReferenceResponse
export function toContentCrossReferenceDTO(
  row: ContentCrossReferencesSelect
): ContentCrossReferenceResponse {
  return {
    id: row.id,
    sourceContentId: row.sourceContentId,
    targetContentId: row.targetContentId,
    referenceType: row.referenceType,
    relevanceScore: row.relevanceScore,
    qualityScore: row.qualityScore,
    contextDescription: row.contextDescription,
    isAuthorApproved: row.isAuthorApproved,
    isAiGenerated: row.isAiGenerated,
    clickCount: row.clickCount,
    createdAt: normalizeDate(row.createdAt),
    updatedAt: normalizeDate(row.updatedAt),
  };
}

// Array helper function
export function toContentCrossReferenceDTOs(
  rows: ContentCrossReferencesSelect[]
): ContentCrossReferenceResponse[] {
  return rows.map(row => toContentCrossReferenceDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

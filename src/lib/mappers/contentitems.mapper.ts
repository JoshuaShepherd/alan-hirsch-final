// Auto-generated mappers for ContentItems
// Generated at: 2025-10-06T21:02:35.491Z
// This file is automatically generated - do not edit manually

import type {
  ContentItemCreate,
  ContentItemResponse,
  ContentItemUpdate,
} from '@/lib/contracts';
import type { contentItems } from '@/lib/database';

// Drizzle inferred types
type ContentItemsSelect = typeof contentItems.$inferSelect;
type ContentItemsInsert = typeof contentItems.$inferInsert;
type ContentItemsUpdate = typeof contentItems.$inferInsert;

// Transform ContentItemCreate to ContentItemsInsert
export function fromCreateContentItemDTO(
  input: ContentItemCreate
): ContentItemsInsert {
  return {
    title: input.title,
    slug: input.slug,
    excerpt: input.excerpt,
    content: input.content,
    authorId: input.authorId,
    coAuthors: input.coAuthors,
    contentType: input.contentType,
    format: input.format,
    wordCount: input.wordCount,
    estimatedReadingTime: input.estimatedReadingTime,
    primaryCategoryId: input.primaryCategoryId,
    secondaryCategories: input.secondaryCategories,
    tags: input.tags,
    theologicalThemes: input.theologicalThemes,
    seriesId: input.seriesId,
    seriesOrder: input.seriesOrder,
    visibility: input.visibility,
    status: input.status,
    featuredImageUrl: input.featuredImageUrl,
    videoUrl: input.videoUrl,
    audioUrl: input.audioUrl,
    attachments: input.attachments,
    metaTitle: input.metaTitle,
    metaDescription: input.metaDescription,
    canonicalUrl: input.canonicalUrl,
    publishedAt: input.publishedAt ? new Date(input.publishedAt) : null,
    scheduledAt: input.scheduledAt ? new Date(input.scheduledAt) : null,
    aiEnhanced: input.aiEnhanced,
    aiSummary: input.aiSummary,
    aiKeyPoints: input.aiKeyPoints,
  };
}

// Transform ContentItemUpdate to ContentItemsUpdate with id
export function fromUpdateContentItemDTO(input: ContentItemUpdate): {
  id: string;
  changes: ContentItemsUpdate;
} {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      title: changes.title,
      slug: changes.slug,
      excerpt: changes.excerpt,
      content: changes.content,
      authorId: changes.authorId,
      coAuthors: changes.coAuthors,
      contentType: changes.contentType,
      format: changes.format,
      wordCount: changes.wordCount,
      estimatedReadingTime: changes.estimatedReadingTime,
      primaryCategoryId: changes.primaryCategoryId,
      secondaryCategories: changes.secondaryCategories,
      tags: changes.tags,
      theologicalThemes: changes.theologicalThemes,
      seriesId: changes.seriesId,
      seriesOrder: changes.seriesOrder,
      visibility: changes.visibility,
      status: changes.status,
      featuredImageUrl: changes.featuredImageUrl,
      videoUrl: changes.videoUrl,
      audioUrl: changes.audioUrl,
      attachments: changes.attachments,
      metaTitle: changes.metaTitle,
      metaDescription: changes.metaDescription,
      canonicalUrl: changes.canonicalUrl,
      publishedAt: changes.publishedAt
        ? new Date(changes.publishedAt)
        : undefined,
      scheduledAt: changes.scheduledAt
        ? new Date(changes.scheduledAt)
        : undefined,
      aiEnhanced: changes.aiEnhanced,
      aiSummary: changes.aiSummary,
      aiKeyPoints: changes.aiKeyPoints,
      updatedAt: changes.updatedAt ? new Date(changes.updatedAt) : new Date(),
    },
  };
}

// Transform ContentItemsSelect to ContentItemResponse
export function toContentItemDTO(row: ContentItemsSelect): ContentItemResponse {
  return {
    id: row.id,
    title: row.title,
    slug: row.slug,
    excerpt: row.excerpt,
    content: row.content,
    authorId: row.authorId,
    coAuthors: normalizeJsonb(row.coAuthors),
    contentType: row.contentType,
    format: row.format,
    wordCount: row.wordCount,
    estimatedReadingTime: row.estimatedReadingTime,
    viewCount: row.viewCount,
    likeCount: row.likeCount,
    shareCount: row.shareCount,
    commentCount: row.commentCount,
    bookmarkCount: row.bookmarkCount,
    primaryCategoryId: row.primaryCategoryId,
    secondaryCategories: normalizeJsonb(row.secondaryCategories),
    tags: normalizeJsonb(row.tags),
    theologicalThemes: normalizeJsonb(row.theologicalThemes),
    seriesId: row.seriesId,
    seriesOrder: row.seriesOrder,
    visibility: row.visibility,
    status: row.status,
    networkAmplificationScore: row.networkAmplificationScore,
    crossReferenceCount: row.crossReferenceCount,
    featuredImageUrl: row.featuredImageUrl,
    videoUrl: row.videoUrl,
    audioUrl: row.audioUrl,
    attachments: normalizeJsonb(row.attachments),
    metaTitle: row.metaTitle,
    metaDescription: row.metaDescription,
    canonicalUrl: row.canonicalUrl,
    publishedAt: normalizeDate(row.publishedAt),
    scheduledAt: normalizeDate(row.scheduledAt),
    aiEnhanced: row.aiEnhanced,
    aiSummary: row.aiSummary,
    aiKeyPoints: normalizeJsonb(row.aiKeyPoints),
    createdAt: normalizeDate(row.createdAt),
    updatedAt: normalizeDate(row.updatedAt),
  };
}

// Array helper function
export function toContentItemDTOs(
  rows: ContentItemsSelect[]
): ContentItemResponse[] {
  return rows.map(row => toContentItemDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

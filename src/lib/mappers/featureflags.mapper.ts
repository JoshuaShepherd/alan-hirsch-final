// Auto-generated mappers for FeatureFlags
// Generated at: 2025-10-06T21:02:35.492Z
// This file is automatically generated - do not edit manually

import type { featureFlags } from '@/lib/database';

// Drizzle inferred types
type FeatureFlagsSelect = typeof featureFlags.$inferSelect;
type FeatureFlagsInsert = typeof featureFlags.$inferInsert;
type FeatureFlagsUpdate = typeof featureFlags.$inferInsert;
import type {
  FeatureFlagCreate,
  FeatureFlagUpdate,
  FeatureFlagResponse,
} from '@/lib/contracts';

// Transform FeatureFlagCreate to FeatureFlagsInsert
export function fromCreateFeatureflagsDTO(input: FeatureFlagCreate): FeatureFlagsInsert {
  return {
    // TODO: Map Create fields to Insert fields based on schema
    // This needs to be customized per entity based on the actual schema
    // Example: fieldName: input.fieldName,
  };
}

// Transform FeatureFlagUpdate to FeatureFlagsUpdate with id
export function fromUpdateFeatureflagsDTO(input: FeatureFlagUpdate): { id: string; changes: FeatureFlagsUpdate } {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      // TODO: Map Update fields to Update fields based on schema
      // This needs to be customized per entity based on the actual schema
      // Example: fieldName: changes.fieldName,
    }
  };
}

// Transform FeatureFlagsSelect to FeatureFlagResponse
export function toFeatureflagsDTO(row: FeatureFlagsSelect): FeatureFlagResponse {
  return {
    // TODO: Map Select fields to Response fields based on schema
    // This needs to be customized per entity based on the actual schema
    // Example: fieldName: row.fieldName,
    // createdAt: normalizeDate(row.createdAt),
    // updatedAt: normalizeDate(row.updatedAt),
  };
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

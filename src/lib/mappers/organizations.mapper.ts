// Auto-generated mappers for Organizations
// Generated at: 2025-01-27T10:00:00.000Z
// This file is automatically generated - do not edit manually

import type {
  OrganizationCreate,
  OrganizationResponse,
  OrganizationUpdate,
} from '@/lib/contracts';
import type { organizations } from '@/lib/database';

// Drizzle inferred types
type OrganizationsSelect = typeof organizations.$inferSelect;
type OrganizationsInsert = typeof organizations.$inferInsert;
type OrganizationsUpdate = typeof organizations.$inferInsert;

// Transform OrganizationCreate to OrganizationsInsert
export function fromCreateOrganizationDTO(
  input: OrganizationCreate
): OrganizationsInsert {
  return {
    name: input.name,
    slug: input.slug,
    description: input.description,
    website: input.website,
    logoUrl: input.logoUrl,
    organizationType: input.organizationType,
    sizeCategory: input.sizeCategory,
    contactEmail: input.contactEmail,
    contactPhone: input.contactPhone,
    address: input.address,
    licenseType: input.licenseType,
    maxUsers: input.maxUsers,
    billingEmail: input.billingEmail,
    accountOwnerId: input.accountOwnerId,
    stripeCustomerId: input.stripeCustomerId,
    stripeProductId: input.stripeProductId,
    status: input.status,
  };
}

// Transform OrganizationUpdate to OrganizationsUpdate with id
export function fromUpdateOrganizationDTO(input: OrganizationUpdate): {
  id: string;
  changes: OrganizationsUpdate;
} {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      name: changes.name,
      slug: changes.slug,
      description: changes.description,
      website: changes.website,
      logoUrl: changes.logoUrl,
      organizationType: changes.organizationType,
      sizeCategory: changes.sizeCategory,
      contactEmail: changes.contactEmail,
      contactPhone: changes.contactPhone,
      address: changes.address,
      licenseType: changes.licenseType,
      maxUsers: changes.maxUsers,
      billingEmail: changes.billingEmail,
      accountOwnerId: changes.accountOwnerId,
      stripeCustomerId: changes.stripeCustomerId,
      stripeProductId: changes.stripeProductId,
      status: changes.status,
      updatedAt: changes.updatedAt,
    },
  };
}

// Transform OrganizationsSelect to OrganizationResponse
export function toOrganizationDTO(
  row: OrganizationsSelect
): OrganizationResponse {
  return {
    id: row.id,
    name: row.name,
    slug: row.slug,
    description: row.description,
    website: row.website,
    logoUrl: row.logoUrl,
    organizationType: row.organizationType,
    sizeCategory: row.sizeCategory,
    contactEmail: row.contactEmail,
    contactPhone: row.contactPhone,
    address: row.address,
    licenseType: row.licenseType,
    maxUsers: row.maxUsers,
    billingEmail: row.billingEmail,
    accountOwnerId: row.accountOwnerId,
    stripeCustomerId: row.stripeCustomerId,
    stripeProductId: row.stripeProductId,
    status: row.status,
    createdAt: normalizeDate(row.createdAt),
    updatedAt: normalizeDate(row.updatedAt),
  };
}

// Array helper function
export function toOrganizationDTOs(
  rows: OrganizationsSelect[]
): OrganizationResponse[] {
  return rows.map(row => toOrganizationDTO(row));
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

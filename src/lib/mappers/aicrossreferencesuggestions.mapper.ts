// Auto-generated mappers for AiCrossReferenceSuggestions
// Generated at: 2025-10-06T21:02:35.491Z
// This file is automatically generated - do not edit manually

import type { aiCrossReferenceSuggestions } from '@/lib/database';

// Drizzle inferred types
type AiCrossReferenceSuggestionsSelect = typeof aiCrossReferenceSuggestions.$inferSelect;
type AiCrossReferenceSuggestionsInsert = typeof aiCrossReferenceSuggestions.$inferInsert;
type AiCrossReferenceSuggestionsUpdate = typeof aiCrossReferenceSuggestions.$inferInsert;
import type {
  AiCrossReferenceSuggestionCreate,
  AiCrossReferenceSuggestionUpdate,
  AiCrossReferenceSuggestionResponse,
} from '@/lib/contracts';

// Transform AiCrossReferenceSuggestionCreate to AiCrossReferenceSuggestionsInsert
export function fromCreateAicrossreferencesuggestionsDTO(input: AiCrossReferenceSuggestionCreate): AiCrossReferenceSuggestionsInsert {
  return {
    // TODO: Map Create fields to Insert fields based on schema
    // This needs to be customized per entity based on the actual schema
    // Example: fieldName: input.fieldName,
  };
}

// Transform AiCrossReferenceSuggestionUpdate to AiCrossReferenceSuggestionsUpdate with id
export function fromUpdateAicrossreferencesuggestionsDTO(input: AiCrossReferenceSuggestionUpdate): { id: string; changes: AiCrossReferenceSuggestionsUpdate } {
  const { id, ...changes } = input;
  return {
    id: id!,
    changes: {
      // TODO: Map Update fields to Update fields based on schema
      // This needs to be customized per entity based on the actual schema
      // Example: fieldName: changes.fieldName,
    }
  };
}

// Transform AiCrossReferenceSuggestionsSelect to AiCrossReferenceSuggestionResponse
export function toAicrossreferencesuggestionsDTO(row: AiCrossReferenceSuggestionsSelect): AiCrossReferenceSuggestionResponse {
  return {
    // TODO: Map Select fields to Response fields based on schema
    // This needs to be customized per entity based on the actual schema
    // Example: fieldName: row.fieldName,
    // createdAt: normalizeDate(row.createdAt),
    // updatedAt: normalizeDate(row.updatedAt),
  };
}

// Helper function to normalize dates to ISO strings
function normalizeDate(date: Date | null | undefined): string | null {
  if (!date) return null;
  return date.toISOString();
}

// Helper function to normalize jsonb fields
function normalizeJsonb<T>(value: T | null | undefined): T | null {
  return value || null;
}

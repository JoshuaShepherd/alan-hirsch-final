import { z } from 'zod';
export declare const userAnalyticsEventEntitySchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    eventType: z.ZodString;
    eventName: z.ZodString;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    sessionId: z.ZodOptional<z.ZodString>;
    pageUrl: z.ZodOptional<z.ZodString>;
    referrer: z.ZodOptional<z.ZodString>;
    userAgent: z.ZodOptional<z.ZodString>;
    ipAddress: z.ZodOptional<z.ZodString>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}>;
export declare const userContentInteractionEntitySchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    contentId: z.ZodString;
    interactionType: z.ZodEnum<["view", "like", "share", "bookmark", "comment", "download"]>;
    duration: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}>;
export declare const learningOutcomeEntitySchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    assessmentId: z.ZodOptional<z.ZodString>;
    contentId: z.ZodOptional<z.ZodString>;
    outcomeType: z.ZodEnum<["knowledge", "skill", "attitude", "behavior"]>;
    description: z.ZodString;
    score: z.ZodOptional<z.ZodNumber>;
    evidence: z.ZodOptional<z.ZodString>;
    achievedAt: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    outcomeType: "knowledge" | "skill" | "attitude" | "behavior";
    achievedAt: string;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
}, {
    id: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    outcomeType: "knowledge" | "skill" | "attitude" | "behavior";
    achievedAt: string;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
}>;
export declare const movementMetricEntitySchema: z.ZodObject<{
    id: z.ZodString;
    organizationId: z.ZodOptional<z.ZodString>;
    metricType: z.ZodEnum<["engagement", "growth", "impact", "revenue", "reach"]>;
    metricName: z.ZodString;
    value: z.ZodNumber;
    unit: z.ZodOptional<z.ZodString>;
    period: z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>;
    periodStart: z.ZodString;
    periodEnd: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: number;
    id: string;
    createdAt: string;
    updatedAt: string;
    metricType: "engagement" | "growth" | "impact" | "revenue" | "reach";
    metricName: string;
    period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    organizationId?: string | undefined;
    unit?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}, {
    value: number;
    id: string;
    createdAt: string;
    updatedAt: string;
    metricType: "engagement" | "growth" | "impact" | "revenue" | "reach";
    metricName: string;
    period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    organizationId?: string | undefined;
    unit?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}>;
export declare const performanceReportEntitySchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodOptional<z.ZodString>;
    reportType: z.ZodEnum<["individual", "organization", "system"]>;
    period: z.ZodEnum<["weekly", "monthly", "quarterly", "yearly"]>;
    periodStart: z.ZodString;
    periodEnd: z.ZodString;
    metrics: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    insights: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    recommendations: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    generatedAt: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    updatedAt: string;
    period: "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    reportType: "organization" | "individual" | "system";
    metrics: Record<string, unknown>;
    insights: string[];
    recommendations: string[];
    generatedAt: string;
    userId?: string | undefined;
    organizationId?: string | undefined;
}, {
    id: string;
    createdAt: string;
    updatedAt: string;
    period: "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    reportType: "organization" | "individual" | "system";
    metrics: Record<string, unknown>;
    generatedAt: string;
    userId?: string | undefined;
    organizationId?: string | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
}>;
export declare const createUserAnalyticsEventSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    userId: z.ZodString;
    eventType: z.ZodString;
    eventName: z.ZodString;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    sessionId: z.ZodOptional<z.ZodString>;
    pageUrl: z.ZodOptional<z.ZodString>;
    referrer: z.ZodOptional<z.ZodString>;
    userAgent: z.ZodOptional<z.ZodString>;
    ipAddress: z.ZodOptional<z.ZodString>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}, {
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}>;
export declare const createUserContentInteractionSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    userId: z.ZodString;
    contentId: z.ZodString;
    interactionType: z.ZodEnum<["view", "like", "share", "bookmark", "comment", "download"]>;
    duration: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}, {
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}>;
export declare const createLearningOutcomeSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    userId: z.ZodString;
    assessmentId: z.ZodOptional<z.ZodString>;
    contentId: z.ZodOptional<z.ZodString>;
    outcomeType: z.ZodEnum<["knowledge", "skill", "attitude", "behavior"]>;
    description: z.ZodString;
    score: z.ZodOptional<z.ZodNumber>;
    evidence: z.ZodOptional<z.ZodString>;
    achievedAt: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    description: string;
    userId: string;
    outcomeType: "knowledge" | "skill" | "attitude" | "behavior";
    achievedAt: string;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
}, {
    description: string;
    userId: string;
    outcomeType: "knowledge" | "skill" | "attitude" | "behavior";
    achievedAt: string;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
}>;
export declare const createMovementMetricSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    organizationId: z.ZodOptional<z.ZodString>;
    metricType: z.ZodEnum<["engagement", "growth", "impact", "revenue", "reach"]>;
    metricName: z.ZodString;
    value: z.ZodNumber;
    unit: z.ZodOptional<z.ZodString>;
    period: z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>;
    periodStart: z.ZodString;
    periodEnd: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    value: number;
    metricType: "engagement" | "growth" | "impact" | "revenue" | "reach";
    metricName: string;
    period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    organizationId?: string | undefined;
    unit?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}, {
    value: number;
    metricType: "engagement" | "growth" | "impact" | "revenue" | "reach";
    metricName: string;
    period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    organizationId?: string | undefined;
    unit?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}>;
export declare const createPerformanceReportSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    userId: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodOptional<z.ZodString>;
    reportType: z.ZodEnum<["individual", "organization", "system"]>;
    period: z.ZodEnum<["weekly", "monthly", "quarterly", "yearly"]>;
    periodStart: z.ZodString;
    periodEnd: z.ZodString;
    metrics: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    insights: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    recommendations: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    generatedAt: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    period: "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    reportType: "organization" | "individual" | "system";
    metrics: Record<string, unknown>;
    insights: string[];
    recommendations: string[];
    generatedAt: string;
    userId?: string | undefined;
    organizationId?: string | undefined;
}, {
    period: "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    reportType: "organization" | "individual" | "system";
    metrics: Record<string, unknown>;
    generatedAt: string;
    userId?: string | undefined;
    organizationId?: string | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
}>;
export declare const updateLearningOutcomeSchema: z.ZodObject<{
    description: z.ZodOptional<z.ZodString>;
    userId: z.ZodOptional<z.ZodString>;
    assessmentId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    contentId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    outcomeType: z.ZodOptional<z.ZodEnum<["knowledge", "skill", "attitude", "behavior"]>>;
    score: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    evidence: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    achievedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    userId?: string | undefined;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    outcomeType?: "knowledge" | "skill" | "attitude" | "behavior" | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
    achievedAt?: string | undefined;
}, {
    description?: string | undefined;
    userId?: string | undefined;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    outcomeType?: "knowledge" | "skill" | "attitude" | "behavior" | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
    achievedAt?: string | undefined;
}>;
export declare const updateMovementMetricSchema: z.ZodObject<{
    value: z.ZodOptional<z.ZodNumber>;
    organizationId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    metricType: z.ZodOptional<z.ZodEnum<["engagement", "growth", "impact", "revenue", "reach"]>>;
    metricName: z.ZodOptional<z.ZodString>;
    unit: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    period: z.ZodOptional<z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>>;
    periodStart: z.ZodOptional<z.ZodString>;
    periodEnd: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    value?: number | undefined;
    organizationId?: string | undefined;
    metricType?: "engagement" | "growth" | "impact" | "revenue" | "reach" | undefined;
    metricName?: string | undefined;
    unit?: string | undefined;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly" | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}, {
    value?: number | undefined;
    organizationId?: string | undefined;
    metricType?: "engagement" | "growth" | "impact" | "revenue" | "reach" | undefined;
    metricName?: string | undefined;
    unit?: string | undefined;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly" | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}>;
export declare const updatePerformanceReportSchema: z.ZodObject<{
    userId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    organizationId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    period: z.ZodOptional<z.ZodEnum<["weekly", "monthly", "quarterly", "yearly"]>>;
    periodStart: z.ZodOptional<z.ZodString>;
    periodEnd: z.ZodOptional<z.ZodString>;
    reportType: z.ZodOptional<z.ZodEnum<["individual", "organization", "system"]>>;
    metrics: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    insights: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    recommendations: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    generatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    userId?: string | undefined;
    organizationId?: string | undefined;
    period?: "weekly" | "monthly" | "quarterly" | "yearly" | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    reportType?: "organization" | "individual" | "system" | undefined;
    metrics?: Record<string, unknown> | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
    generatedAt?: string | undefined;
}, {
    userId?: string | undefined;
    organizationId?: string | undefined;
    period?: "weekly" | "monthly" | "quarterly" | "yearly" | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    reportType?: "organization" | "individual" | "system" | undefined;
    metrics?: Record<string, unknown> | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
    generatedAt?: string | undefined;
}>;
export type UserAnalyticsEventEntity = z.infer<typeof userAnalyticsEventEntitySchema>;
export type UserContentInteractionEntity = z.infer<typeof userContentInteractionEntitySchema>;
export type LearningOutcomeEntity = z.infer<typeof learningOutcomeEntitySchema>;
export type MovementMetricEntity = z.infer<typeof movementMetricEntitySchema>;
export type PerformanceReportEntity = z.infer<typeof performanceReportEntitySchema>;
export type CreateUserAnalyticsEvent = z.infer<typeof createUserAnalyticsEventSchema>;
export type CreateUserContentInteraction = z.infer<typeof createUserContentInteractionSchema>;
export type CreateLearningOutcome = z.infer<typeof createLearningOutcomeSchema>;
export type CreateMovementMetric = z.infer<typeof createMovementMetricSchema>;
export type CreatePerformanceReport = z.infer<typeof createPerformanceReportSchema>;
export type UpdateLearningOutcome = z.infer<typeof updateLearningOutcomeSchema>;
export type UpdateMovementMetric = z.infer<typeof updateMovementMetricSchema>;
export type UpdatePerformanceReport = z.infer<typeof updatePerformanceReportSchema>;
export declare const userAnalyticsEventSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    eventType: z.ZodString;
    eventName: z.ZodString;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    sessionId: z.ZodOptional<z.ZodString>;
    pageUrl: z.ZodOptional<z.ZodString>;
    referrer: z.ZodOptional<z.ZodString>;
    userAgent: z.ZodOptional<z.ZodString>;
    ipAddress: z.ZodOptional<z.ZodString>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}>;
export declare const userContentInteractionSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    contentId: z.ZodString;
    interactionType: z.ZodEnum<["view", "like", "share", "bookmark", "comment", "download"]>;
    duration: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}, {
    id: string;
    createdAt: string;
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}>;
export declare const learningOutcomeSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    assessmentId: z.ZodOptional<z.ZodString>;
    contentId: z.ZodOptional<z.ZodString>;
    outcomeType: z.ZodEnum<["knowledge", "skill", "attitude", "behavior"]>;
    description: z.ZodString;
    score: z.ZodOptional<z.ZodNumber>;
    evidence: z.ZodOptional<z.ZodString>;
    achievedAt: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    outcomeType: "knowledge" | "skill" | "attitude" | "behavior";
    achievedAt: string;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
}, {
    id: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    userId: string;
    outcomeType: "knowledge" | "skill" | "attitude" | "behavior";
    achievedAt: string;
    assessmentId?: string | undefined;
    contentId?: string | undefined;
    score?: number | undefined;
    evidence?: string | undefined;
}>;
export declare const movementMetricSchema: z.ZodObject<{
    id: z.ZodString;
    organizationId: z.ZodOptional<z.ZodString>;
    metricType: z.ZodEnum<["engagement", "growth", "impact", "revenue", "reach"]>;
    metricName: z.ZodString;
    value: z.ZodNumber;
    unit: z.ZodOptional<z.ZodString>;
    period: z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>;
    periodStart: z.ZodString;
    periodEnd: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: number;
    id: string;
    createdAt: string;
    updatedAt: string;
    metricType: "engagement" | "growth" | "impact" | "revenue" | "reach";
    metricName: string;
    period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    organizationId?: string | undefined;
    unit?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}, {
    value: number;
    id: string;
    createdAt: string;
    updatedAt: string;
    metricType: "engagement" | "growth" | "impact" | "revenue" | "reach";
    metricName: string;
    period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    organizationId?: string | undefined;
    unit?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
}>;
export declare const performanceReportSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodOptional<z.ZodString>;
    reportType: z.ZodEnum<["individual", "organization", "system"]>;
    period: z.ZodEnum<["weekly", "monthly", "quarterly", "yearly"]>;
    periodStart: z.ZodString;
    periodEnd: z.ZodString;
    metrics: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    insights: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    recommendations: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    generatedAt: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    updatedAt: string;
    period: "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    reportType: "organization" | "individual" | "system";
    metrics: Record<string, unknown>;
    insights: string[];
    recommendations: string[];
    generatedAt: string;
    userId?: string | undefined;
    organizationId?: string | undefined;
}, {
    id: string;
    createdAt: string;
    updatedAt: string;
    period: "weekly" | "monthly" | "quarterly" | "yearly";
    periodStart: string;
    periodEnd: string;
    reportType: "organization" | "individual" | "system";
    metrics: Record<string, unknown>;
    generatedAt: string;
    userId?: string | undefined;
    organizationId?: string | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
}>;
export declare const newUserAnalyticsEventSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    userId: z.ZodString;
    eventType: z.ZodString;
    eventName: z.ZodString;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    sessionId: z.ZodOptional<z.ZodString>;
    pageUrl: z.ZodOptional<z.ZodString>;
    referrer: z.ZodOptional<z.ZodString>;
    userAgent: z.ZodOptional<z.ZodString>;
    ipAddress: z.ZodOptional<z.ZodString>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}, {
    timestamp: string;
    userId: string;
    eventType: string;
    eventName: string;
    properties?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    pageUrl?: string | undefined;
    referrer?: string | undefined;
    userAgent?: string | undefined;
    ipAddress?: string | undefined;
}>;
export declare const newUserContentInteractionSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    userId: z.ZodString;
    contentId: z.ZodString;
    interactionType: z.ZodEnum<["view", "like", "share", "bookmark", "comment", "download"]>;
    duration: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    timestamp: z.ZodString;
    createdAt: z.ZodString;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}, {
    timestamp: string;
    userId: string;
    contentId: string;
    interactionType: "view" | "like" | "share" | "bookmark" | "comment" | "download";
    metadata?: Record<string, unknown> | undefined;
    duration?: number | undefined;
}>;
export type UserAnalyticsEvent = UserAnalyticsEventEntity;
export type UserContentInteraction = UserContentInteractionEntity;
export type LearningOutcome = LearningOutcomeEntity;
export type MovementMetric = MovementMetricEntity;
export type PerformanceReport = PerformanceReportEntity;
export type NewUserAnalyticsEvent = CreateUserAnalyticsEvent;
export type NewUserContentInteraction = CreateUserContentInteraction;
export type NewLearningOutcome = CreateLearningOutcome;
export type NewMovementMetric = CreateMovementMetric;
export type NewPerformanceReport = CreatePerformanceReport;
//# sourceMappingURL=analytics.schema.d.ts.map
import { z } from 'zod';
export declare const aiConversationResponseSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    conversationType: z.ZodEnum<["theological_discussion", "content_creation", "assessment_guidance", "ministry_advice", "leadership_coaching", "content_discovery", "research_assistance", "general"]>;
    title: z.ZodNullable<z.ZodString>;
    primaryTopic: z.ZodNullable<z.ZodString>;
    theologicalContext: z.ZodNullable<z.ZodObject<{
        themes: z.ZodArray<z.ZodString, "many">;
        scriptures: z.ZodArray<z.ZodString, "many">;
        traditions: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        themes: string[];
        scriptures: string[];
        traditions: string[];
    }, {
        themes: string[];
        scriptures: string[];
        traditions: string[];
    }>>;
    userApestProfile: z.ZodNullable<z.ZodObject<{
        primary: z.ZodString;
        secondary: z.ZodString;
        scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        primary: string;
        secondary: string;
        scores: Record<string, number>;
    }, {
        primary: string;
        secondary: string;
        scores: Record<string, number>;
    }>>;
    ministryContext: z.ZodNullable<z.ZodObject<{
        role: z.ZodString;
        experience: z.ZodNumber;
        focus_areas: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        role: string;
        experience: number;
        focus_areas: string[];
    }, {
        role: string;
        experience: number;
        focus_areas: string[];
    }>>;
    culturalContext: z.ZodNullable<z.ZodString>;
    totalMessages: z.ZodNumber;
    conversationDurationMinutes: z.ZodNullable<z.ZodNumber>;
    userSatisfactionRating: z.ZodNullable<z.ZodNumber>;
    theologicalAccuracyVerified: z.ZodBoolean;
    helpfulnessRating: z.ZodNullable<z.ZodNumber>;
    aiModel: z.ZodString;
    modelVersion: z.ZodNullable<z.ZodString>;
    totalTokensUsed: z.ZodNumber;
    referencedContent: z.ZodArray<z.ZodString, "many">;
    generatedInsights: z.ZodNullable<z.ZodString>;
    status: z.ZodEnum<["active", "completed", "abandoned", "archived"]>;
    isActive: z.ZodBoolean;
    isCompleted: z.ZodBoolean;
    isAbandoned: z.ZodBoolean;
    isArchived: z.ZodBoolean;
    hasUserRating: z.ZodBoolean;
    conversationDurationText: z.ZodNullable<z.ZodString>;
    tokenUsageText: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    completedAt: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "archived" | "active" | "completed" | "abandoned";
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    title: string | null;
    culturalContext: string | null;
    userId: string;
    ministryContext: {
        role: string;
        experience: number;
        focus_areas: string[];
    } | null;
    completedAt: string | null;
    conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
    primaryTopic: string | null;
    theologicalContext: {
        themes: string[];
        scriptures: string[];
        traditions: string[];
    } | null;
    userApestProfile: {
        primary: string;
        secondary: string;
        scores: Record<string, number>;
    } | null;
    totalMessages: number;
    conversationDurationMinutes: number | null;
    userSatisfactionRating: number | null;
    theologicalAccuracyVerified: boolean;
    helpfulnessRating: number | null;
    aiModel: string;
    modelVersion: string | null;
    totalTokensUsed: number;
    referencedContent: string[];
    generatedInsights: string | null;
    isCompleted: boolean;
    isAbandoned: boolean;
    isArchived: boolean;
    hasUserRating: boolean;
    conversationDurationText: string | null;
    tokenUsageText: string;
}, {
    id: string;
    status: "archived" | "active" | "completed" | "abandoned";
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    title: string | null;
    culturalContext: string | null;
    userId: string;
    ministryContext: {
        role: string;
        experience: number;
        focus_areas: string[];
    } | null;
    completedAt: string | null;
    conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
    primaryTopic: string | null;
    theologicalContext: {
        themes: string[];
        scriptures: string[];
        traditions: string[];
    } | null;
    userApestProfile: {
        primary: string;
        secondary: string;
        scores: Record<string, number>;
    } | null;
    totalMessages: number;
    conversationDurationMinutes: number | null;
    userSatisfactionRating: number | null;
    theologicalAccuracyVerified: boolean;
    helpfulnessRating: number | null;
    aiModel: string;
    modelVersion: string | null;
    totalTokensUsed: number;
    referencedContent: string[];
    generatedInsights: string | null;
    isCompleted: boolean;
    isAbandoned: boolean;
    isArchived: boolean;
    hasUserRating: boolean;
    conversationDurationText: string | null;
    tokenUsageText: string;
}>;
export declare const aiMessageResponseSchema: z.ZodObject<{
    id: z.ZodString;
    conversationId: z.ZodString;
    role: z.ZodEnum<["user", "assistant", "system"]>;
    content: z.ZodString;
    messageIndex: z.ZodNumber;
    tokenCount: z.ZodNullable<z.ZodNumber>;
    citedContent: z.ZodArray<z.ZodObject<{
        contentId: z.ZodString;
        title: z.ZodString;
        relevanceScore: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        title: string;
        contentId: string;
        relevanceScore: number;
    }, {
        title: string;
        contentId: string;
        relevanceScore: number;
    }>, "many">;
    confidence: z.ZodNullable<z.ZodString>;
    factualAccuracy: z.ZodNullable<z.ZodBoolean>;
    theologicalSoundness: z.ZodNullable<z.ZodBoolean>;
    userRating: z.ZodNullable<z.ZodNumber>;
    userFeedback: z.ZodNullable<z.ZodString>;
    flaggedForReview: z.ZodBoolean;
    processingTime: z.ZodNullable<z.ZodNumber>;
    isUserMessage: z.ZodBoolean;
    isAssistantMessage: z.ZodBoolean;
    isSystemMessage: z.ZodBoolean;
    hasUserRating: z.ZodBoolean;
    hasUserFeedback: z.ZodBoolean;
    isFlagged: z.ZodBoolean;
    processingTimeText: z.ZodNullable<z.ZodString>;
    confidenceText: z.ZodNullable<z.ZodString>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    role: "user" | "assistant" | "system";
    id: string;
    createdAt: string;
    updatedAt: string;
    content: string;
    processingTime: number | null;
    hasUserRating: boolean;
    conversationId: string;
    messageIndex: number;
    tokenCount: number | null;
    citedContent: {
        title: string;
        contentId: string;
        relevanceScore: number;
    }[];
    confidence: string | null;
    factualAccuracy: boolean | null;
    theologicalSoundness: boolean | null;
    userRating: number | null;
    userFeedback: string | null;
    flaggedForReview: boolean;
    isUserMessage: boolean;
    isAssistantMessage: boolean;
    isSystemMessage: boolean;
    hasUserFeedback: boolean;
    isFlagged: boolean;
    processingTimeText: string | null;
    confidenceText: string | null;
}, {
    role: "user" | "assistant" | "system";
    id: string;
    createdAt: string;
    updatedAt: string;
    content: string;
    processingTime: number | null;
    hasUserRating: boolean;
    conversationId: string;
    messageIndex: number;
    tokenCount: number | null;
    citedContent: {
        title: string;
        contentId: string;
        relevanceScore: number;
    }[];
    confidence: string | null;
    factualAccuracy: boolean | null;
    theologicalSoundness: boolean | null;
    userRating: number | null;
    userFeedback: string | null;
    flaggedForReview: boolean;
    isUserMessage: boolean;
    isAssistantMessage: boolean;
    isSystemMessage: boolean;
    hasUserFeedback: boolean;
    isFlagged: boolean;
    processingTimeText: string | null;
    confidenceText: string | null;
}>;
export declare const aiContentJobResponseSchema: z.ZodObject<{
    id: z.ZodString;
    contentId: z.ZodNullable<z.ZodString>;
    userId: z.ZodNullable<z.ZodString>;
    jobType: z.ZodEnum<["summarize", "extract_key_points", "generate_cross_references", "enhance_seo", "translate", "generate_questions", "create_outline", "fact_check"]>;
    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
    priority: z.ZodEnum<["low", "normal", "high", "urgent"]>;
    status: z.ZodEnum<["pending", "processing", "completed", "failed", "cancelled"]>;
    result: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    confidenceScore: z.ZodNullable<z.ZodString>;
    humanReviewed: z.ZodBoolean;
    humanApproved: z.ZodNullable<z.ZodBoolean>;
    reviewNotes: z.ZodNullable<z.ZodString>;
    aiModel: z.ZodString;
    tokensUsed: z.ZodNullable<z.ZodNumber>;
    processingCost: z.ZodNullable<z.ZodString>;
    errorMessage: z.ZodNullable<z.ZodString>;
    retryCount: z.ZodNumber;
    isPending: z.ZodBoolean;
    isProcessing: z.ZodBoolean;
    isCompleted: z.ZodBoolean;
    isFailed: z.ZodBoolean;
    isCancelled: z.ZodBoolean;
    hasError: z.ZodBoolean;
    needsHumanReview: z.ZodBoolean;
    isHighPriority: z.ZodBoolean;
    processingCostText: z.ZodNullable<z.ZodString>;
    confidenceText: z.ZodNullable<z.ZodString>;
    createdAt: z.ZodString;
    startedAt: z.ZodNullable<z.ZodString>;
    completedAt: z.ZodNullable<z.ZodString>;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "cancelled" | "pending" | "failed" | "completed" | "processing";
    createdAt: string;
    updatedAt: string;
    result: Record<string, any> | null;
    userId: string | null;
    startedAt: string | null;
    completedAt: string | null;
    priority: "low" | "high" | "normal" | "urgent";
    aiModel: string;
    isCompleted: boolean;
    contentId: string | null;
    confidenceText: string | null;
    jobType: "summarize" | "extract_key_points" | "generate_cross_references" | "enhance_seo" | "translate" | "generate_questions" | "create_outline" | "fact_check";
    parameters: Record<string, any>;
    confidenceScore: string | null;
    humanReviewed: boolean;
    humanApproved: boolean | null;
    reviewNotes: string | null;
    tokensUsed: number | null;
    processingCost: string | null;
    errorMessage: string | null;
    retryCount: number;
    isPending: boolean;
    isProcessing: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    hasError: boolean;
    needsHumanReview: boolean;
    isHighPriority: boolean;
    processingCostText: string | null;
}, {
    id: string;
    status: "cancelled" | "pending" | "failed" | "completed" | "processing";
    createdAt: string;
    updatedAt: string;
    result: Record<string, any> | null;
    userId: string | null;
    startedAt: string | null;
    completedAt: string | null;
    priority: "low" | "high" | "normal" | "urgent";
    aiModel: string;
    isCompleted: boolean;
    contentId: string | null;
    confidenceText: string | null;
    jobType: "summarize" | "extract_key_points" | "generate_cross_references" | "enhance_seo" | "translate" | "generate_questions" | "create_outline" | "fact_check";
    parameters: Record<string, any>;
    confidenceScore: string | null;
    humanReviewed: boolean;
    humanApproved: boolean | null;
    reviewNotes: string | null;
    tokensUsed: number | null;
    processingCost: string | null;
    errorMessage: string | null;
    retryCount: number;
    isPending: boolean;
    isProcessing: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    hasError: boolean;
    needsHumanReview: boolean;
    isHighPriority: boolean;
    processingCostText: string | null;
}>;
export declare const aiCrossReferenceSuggestionResponseSchema: z.ZodObject<{
    id: z.ZodString;
    sourceContentId: z.ZodString;
    targetContentId: z.ZodString;
    suggestedReferenceType: z.ZodEnum<["builds_on", "contradicts", "supports", "extends", "applies", "critiques", "synthesizes"]>;
    confidenceScore: z.ZodString;
    relevanceScore: z.ZodString;
    reasoning: z.ZodNullable<z.ZodString>;
    keyConnections: z.ZodNullable<z.ZodObject<{
        themes: z.ZodArray<z.ZodString, "many">;
        concepts: z.ZodArray<z.ZodString, "many">;
        scriptures: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        themes: string[];
        scriptures: string[];
        concepts: string[];
    }, {
        themes: string[];
        scriptures: string[];
        concepts: string[];
    }>>;
    humanReviewed: z.ZodBoolean;
    humanApproved: z.ZodNullable<z.ZodBoolean>;
    reviewNotes: z.ZodNullable<z.ZodString>;
    status: z.ZodEnum<["pending", "approved", "rejected", "implemented"]>;
    aiModel: z.ZodString;
    modelVersion: z.ZodNullable<z.ZodString>;
    isPending: z.ZodBoolean;
    isApproved: z.ZodBoolean;
    isRejected: z.ZodBoolean;
    isImplemented: z.ZodBoolean;
    needsReview: z.ZodBoolean;
    hasHighConfidence: z.ZodBoolean;
    hasHighRelevance: z.ZodBoolean;
    confidenceText: z.ZodString;
    relevanceText: z.ZodString;
    sourceContent: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        slug: string;
        title: string;
    }, {
        id: string;
        slug: string;
        title: string;
    }>>;
    targetContent: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        slug: string;
        title: string;
    }, {
        id: string;
        slug: string;
        title: string;
    }>>;
    createdAt: z.ZodString;
    reviewedAt: z.ZodNullable<z.ZodString>;
    implementedAt: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "pending" | "approved" | "rejected" | "implemented";
    createdAt: string;
    aiModel: string;
    modelVersion: string | null;
    relevanceScore: string;
    confidenceText: string;
    confidenceScore: string;
    humanReviewed: boolean;
    humanApproved: boolean | null;
    reviewNotes: string | null;
    isPending: boolean;
    sourceContentId: string;
    targetContentId: string;
    suggestedReferenceType: "builds_on" | "contradicts" | "supports" | "extends" | "applies" | "critiques" | "synthesizes";
    reasoning: string | null;
    keyConnections: {
        themes: string[];
        scriptures: string[];
        concepts: string[];
    } | null;
    isApproved: boolean;
    isRejected: boolean;
    isImplemented: boolean;
    needsReview: boolean;
    hasHighConfidence: boolean;
    hasHighRelevance: boolean;
    relevanceText: string;
    reviewedAt: string | null;
    implementedAt: string | null;
    sourceContent?: {
        id: string;
        slug: string;
        title: string;
    } | undefined;
    targetContent?: {
        id: string;
        slug: string;
        title: string;
    } | undefined;
}, {
    id: string;
    status: "pending" | "approved" | "rejected" | "implemented";
    createdAt: string;
    aiModel: string;
    modelVersion: string | null;
    relevanceScore: string;
    confidenceText: string;
    confidenceScore: string;
    humanReviewed: boolean;
    humanApproved: boolean | null;
    reviewNotes: string | null;
    isPending: boolean;
    sourceContentId: string;
    targetContentId: string;
    suggestedReferenceType: "builds_on" | "contradicts" | "supports" | "extends" | "applies" | "critiques" | "synthesizes";
    reasoning: string | null;
    keyConnections: {
        themes: string[];
        scriptures: string[];
        concepts: string[];
    } | null;
    isApproved: boolean;
    isRejected: boolean;
    isImplemented: boolean;
    needsReview: boolean;
    hasHighConfidence: boolean;
    hasHighRelevance: boolean;
    relevanceText: string;
    reviewedAt: string | null;
    implementedAt: string | null;
    sourceContent?: {
        id: string;
        slug: string;
        title: string;
    } | undefined;
    targetContent?: {
        id: string;
        slug: string;
        title: string;
    } | undefined;
}>;
export declare const theologicalConceptResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    slug: z.ZodString;
    definition: z.ZodNullable<z.ZodString>;
    conceptType: z.ZodEnum<["doctrine", "practice", "tradition", "movement", "person", "event", "text"]>;
    theologicalTradition: z.ZodArray<z.ZodString, "many">;
    biblicalReferences: z.ZodArray<z.ZodString, "many">;
    historicalPeriod: z.ZodNullable<z.ZodString>;
    relatedConcepts: z.ZodArray<z.ZodString, "many">;
    synonyms: z.ZodArray<z.ZodString, "many">;
    apestRelevance: z.ZodObject<{
        apostolic: z.ZodNumber;
        prophetic: z.ZodNumber;
        evangelistic: z.ZodNumber;
        shepherding: z.ZodNumber;
        teaching: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        apostolic: number;
        prophetic: number;
        evangelistic: number;
        shepherding: number;
        teaching: number;
    }, {
        apostolic: number;
        prophetic: number;
        evangelistic: number;
        shepherding: number;
        teaching: number;
    }>;
    contentReferences: z.ZodNumber;
    searchCount: z.ZodNumber;
    hasDefinition: z.ZodBoolean;
    hasRelatedConcepts: z.ZodBoolean;
    hasSynonyms: z.ZodBoolean;
    hasBiblicalReferences: z.ZodBoolean;
    isFrequentlyUsed: z.ZodBoolean;
    primaryApestDimension: z.ZodString;
    apestRelevanceText: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
    apestRelevance: {
        apostolic: number;
        prophetic: number;
        evangelistic: number;
        shepherding: number;
        teaching: number;
    };
    createdAt: string;
    updatedAt: string;
    theologicalTradition: string[];
    definition: string | null;
    conceptType: "text" | "doctrine" | "practice" | "tradition" | "movement" | "person" | "event";
    biblicalReferences: string[];
    historicalPeriod: string | null;
    relatedConcepts: string[];
    synonyms: string[];
    contentReferences: number;
    searchCount: number;
    hasDefinition: boolean;
    hasRelatedConcepts: boolean;
    hasSynonyms: boolean;
    hasBiblicalReferences: boolean;
    isFrequentlyUsed: boolean;
    primaryApestDimension: string;
    apestRelevanceText: string;
}, {
    name: string;
    id: string;
    slug: string;
    apestRelevance: {
        apostolic: number;
        prophetic: number;
        evangelistic: number;
        shepherding: number;
        teaching: number;
    };
    createdAt: string;
    updatedAt: string;
    theologicalTradition: string[];
    definition: string | null;
    conceptType: "text" | "doctrine" | "practice" | "tradition" | "movement" | "person" | "event";
    biblicalReferences: string[];
    historicalPeriod: string | null;
    relatedConcepts: string[];
    synonyms: string[];
    contentReferences: number;
    searchCount: number;
    hasDefinition: boolean;
    hasRelatedConcepts: boolean;
    hasSynonyms: boolean;
    hasBiblicalReferences: boolean;
    isFrequentlyUsed: boolean;
    primaryApestDimension: string;
    apestRelevanceText: string;
}>;
export declare const paginatedAiConversationListResponseSchema: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        userId: z.ZodString;
        conversationType: z.ZodEnum<["theological_discussion", "content_creation", "assessment_guidance", "ministry_advice", "leadership_coaching", "content_discovery", "research_assistance", "general"]>;
        title: z.ZodNullable<z.ZodString>;
        primaryTopic: z.ZodNullable<z.ZodString>;
        theologicalContext: z.ZodNullable<z.ZodObject<{
            themes: z.ZodArray<z.ZodString, "many">;
            scriptures: z.ZodArray<z.ZodString, "many">;
            traditions: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            themes: string[];
            scriptures: string[];
            traditions: string[];
        }, {
            themes: string[];
            scriptures: string[];
            traditions: string[];
        }>>;
        userApestProfile: z.ZodNullable<z.ZodObject<{
            primary: z.ZodString;
            secondary: z.ZodString;
            scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            primary: string;
            secondary: string;
            scores: Record<string, number>;
        }, {
            primary: string;
            secondary: string;
            scores: Record<string, number>;
        }>>;
        ministryContext: z.ZodNullable<z.ZodObject<{
            role: z.ZodString;
            experience: z.ZodNumber;
            focus_areas: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            role: string;
            experience: number;
            focus_areas: string[];
        }, {
            role: string;
            experience: number;
            focus_areas: string[];
        }>>;
        culturalContext: z.ZodNullable<z.ZodString>;
        totalMessages: z.ZodNumber;
        conversationDurationMinutes: z.ZodNullable<z.ZodNumber>;
        userSatisfactionRating: z.ZodNullable<z.ZodNumber>;
        theologicalAccuracyVerified: z.ZodBoolean;
        helpfulnessRating: z.ZodNullable<z.ZodNumber>;
        aiModel: z.ZodString;
        modelVersion: z.ZodNullable<z.ZodString>;
        totalTokensUsed: z.ZodNumber;
        referencedContent: z.ZodArray<z.ZodString, "many">;
        generatedInsights: z.ZodNullable<z.ZodString>;
        status: z.ZodEnum<["active", "completed", "abandoned", "archived"]>;
        isActive: z.ZodBoolean;
        isCompleted: z.ZodBoolean;
        isAbandoned: z.ZodBoolean;
        isArchived: z.ZodBoolean;
        hasUserRating: z.ZodBoolean;
        conversationDurationText: z.ZodNullable<z.ZodString>;
        tokenUsageText: z.ZodString;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
        completedAt: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        status: "archived" | "active" | "completed" | "abandoned";
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        title: string | null;
        culturalContext: string | null;
        userId: string;
        ministryContext: {
            role: string;
            experience: number;
            focus_areas: string[];
        } | null;
        completedAt: string | null;
        conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
        primaryTopic: string | null;
        theologicalContext: {
            themes: string[];
            scriptures: string[];
            traditions: string[];
        } | null;
        userApestProfile: {
            primary: string;
            secondary: string;
            scores: Record<string, number>;
        } | null;
        totalMessages: number;
        conversationDurationMinutes: number | null;
        userSatisfactionRating: number | null;
        theologicalAccuracyVerified: boolean;
        helpfulnessRating: number | null;
        aiModel: string;
        modelVersion: string | null;
        totalTokensUsed: number;
        referencedContent: string[];
        generatedInsights: string | null;
        isCompleted: boolean;
        isAbandoned: boolean;
        isArchived: boolean;
        hasUserRating: boolean;
        conversationDurationText: string | null;
        tokenUsageText: string;
    }, {
        id: string;
        status: "archived" | "active" | "completed" | "abandoned";
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        title: string | null;
        culturalContext: string | null;
        userId: string;
        ministryContext: {
            role: string;
            experience: number;
            focus_areas: string[];
        } | null;
        completedAt: string | null;
        conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
        primaryTopic: string | null;
        theologicalContext: {
            themes: string[];
            scriptures: string[];
            traditions: string[];
        } | null;
        userApestProfile: {
            primary: string;
            secondary: string;
            scores: Record<string, number>;
        } | null;
        totalMessages: number;
        conversationDurationMinutes: number | null;
        userSatisfactionRating: number | null;
        theologicalAccuracyVerified: boolean;
        helpfulnessRating: number | null;
        aiModel: string;
        modelVersion: string | null;
        totalTokensUsed: number;
        referencedContent: string[];
        generatedInsights: string | null;
        isCompleted: boolean;
        isAbandoned: boolean;
        isArchived: boolean;
        hasUserRating: boolean;
        conversationDurationText: string | null;
        tokenUsageText: string;
    }>, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }>;
    success: z.ZodBoolean;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        id: string;
        status: "archived" | "active" | "completed" | "abandoned";
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        title: string | null;
        culturalContext: string | null;
        userId: string;
        ministryContext: {
            role: string;
            experience: number;
            focus_areas: string[];
        } | null;
        completedAt: string | null;
        conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
        primaryTopic: string | null;
        theologicalContext: {
            themes: string[];
            scriptures: string[];
            traditions: string[];
        } | null;
        userApestProfile: {
            primary: string;
            secondary: string;
            scores: Record<string, number>;
        } | null;
        totalMessages: number;
        conversationDurationMinutes: number | null;
        userSatisfactionRating: number | null;
        theologicalAccuracyVerified: boolean;
        helpfulnessRating: number | null;
        aiModel: string;
        modelVersion: string | null;
        totalTokensUsed: number;
        referencedContent: string[];
        generatedInsights: string | null;
        isCompleted: boolean;
        isAbandoned: boolean;
        isArchived: boolean;
        hasUserRating: boolean;
        conversationDurationText: string | null;
        tokenUsageText: string;
    }[];
    message?: string | undefined;
}, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        id: string;
        status: "archived" | "active" | "completed" | "abandoned";
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        title: string | null;
        culturalContext: string | null;
        userId: string;
        ministryContext: {
            role: string;
            experience: number;
            focus_areas: string[];
        } | null;
        completedAt: string | null;
        conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
        primaryTopic: string | null;
        theologicalContext: {
            themes: string[];
            scriptures: string[];
            traditions: string[];
        } | null;
        userApestProfile: {
            primary: string;
            secondary: string;
            scores: Record<string, number>;
        } | null;
        totalMessages: number;
        conversationDurationMinutes: number | null;
        userSatisfactionRating: number | null;
        theologicalAccuracyVerified: boolean;
        helpfulnessRating: number | null;
        aiModel: string;
        modelVersion: string | null;
        totalTokensUsed: number;
        referencedContent: string[];
        generatedInsights: string | null;
        isCompleted: boolean;
        isAbandoned: boolean;
        isArchived: boolean;
        hasUserRating: boolean;
        conversationDurationText: string | null;
        tokenUsageText: string;
    }[];
    message?: string | undefined;
}>;
export declare const paginatedAiMessageListResponseSchema: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        conversationId: z.ZodString;
        role: z.ZodEnum<["user", "assistant", "system"]>;
        content: z.ZodString;
        messageIndex: z.ZodNumber;
        tokenCount: z.ZodNullable<z.ZodNumber>;
        citedContent: z.ZodArray<z.ZodObject<{
            contentId: z.ZodString;
            title: z.ZodString;
            relevanceScore: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            title: string;
            contentId: string;
            relevanceScore: number;
        }, {
            title: string;
            contentId: string;
            relevanceScore: number;
        }>, "many">;
        confidence: z.ZodNullable<z.ZodString>;
        factualAccuracy: z.ZodNullable<z.ZodBoolean>;
        theologicalSoundness: z.ZodNullable<z.ZodBoolean>;
        userRating: z.ZodNullable<z.ZodNumber>;
        userFeedback: z.ZodNullable<z.ZodString>;
        flaggedForReview: z.ZodBoolean;
        processingTime: z.ZodNullable<z.ZodNumber>;
        isUserMessage: z.ZodBoolean;
        isAssistantMessage: z.ZodBoolean;
        isSystemMessage: z.ZodBoolean;
        hasUserRating: z.ZodBoolean;
        hasUserFeedback: z.ZodBoolean;
        isFlagged: z.ZodBoolean;
        processingTimeText: z.ZodNullable<z.ZodString>;
        confidenceText: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "assistant" | "system";
        id: string;
        createdAt: string;
        updatedAt: string;
        content: string;
        processingTime: number | null;
        hasUserRating: boolean;
        conversationId: string;
        messageIndex: number;
        tokenCount: number | null;
        citedContent: {
            title: string;
            contentId: string;
            relevanceScore: number;
        }[];
        confidence: string | null;
        factualAccuracy: boolean | null;
        theologicalSoundness: boolean | null;
        userRating: number | null;
        userFeedback: string | null;
        flaggedForReview: boolean;
        isUserMessage: boolean;
        isAssistantMessage: boolean;
        isSystemMessage: boolean;
        hasUserFeedback: boolean;
        isFlagged: boolean;
        processingTimeText: string | null;
        confidenceText: string | null;
    }, {
        role: "user" | "assistant" | "system";
        id: string;
        createdAt: string;
        updatedAt: string;
        content: string;
        processingTime: number | null;
        hasUserRating: boolean;
        conversationId: string;
        messageIndex: number;
        tokenCount: number | null;
        citedContent: {
            title: string;
            contentId: string;
            relevanceScore: number;
        }[];
        confidence: string | null;
        factualAccuracy: boolean | null;
        theologicalSoundness: boolean | null;
        userRating: number | null;
        userFeedback: string | null;
        flaggedForReview: boolean;
        isUserMessage: boolean;
        isAssistantMessage: boolean;
        isSystemMessage: boolean;
        hasUserFeedback: boolean;
        isFlagged: boolean;
        processingTimeText: string | null;
        confidenceText: string | null;
    }>, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }>;
    success: z.ZodBoolean;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        role: "user" | "assistant" | "system";
        id: string;
        createdAt: string;
        updatedAt: string;
        content: string;
        processingTime: number | null;
        hasUserRating: boolean;
        conversationId: string;
        messageIndex: number;
        tokenCount: number | null;
        citedContent: {
            title: string;
            contentId: string;
            relevanceScore: number;
        }[];
        confidence: string | null;
        factualAccuracy: boolean | null;
        theologicalSoundness: boolean | null;
        userRating: number | null;
        userFeedback: string | null;
        flaggedForReview: boolean;
        isUserMessage: boolean;
        isAssistantMessage: boolean;
        isSystemMessage: boolean;
        hasUserFeedback: boolean;
        isFlagged: boolean;
        processingTimeText: string | null;
        confidenceText: string | null;
    }[];
    message?: string | undefined;
}, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        role: "user" | "assistant" | "system";
        id: string;
        createdAt: string;
        updatedAt: string;
        content: string;
        processingTime: number | null;
        hasUserRating: boolean;
        conversationId: string;
        messageIndex: number;
        tokenCount: number | null;
        citedContent: {
            title: string;
            contentId: string;
            relevanceScore: number;
        }[];
        confidence: string | null;
        factualAccuracy: boolean | null;
        theologicalSoundness: boolean | null;
        userRating: number | null;
        userFeedback: string | null;
        flaggedForReview: boolean;
        isUserMessage: boolean;
        isAssistantMessage: boolean;
        isSystemMessage: boolean;
        hasUserFeedback: boolean;
        isFlagged: boolean;
        processingTimeText: string | null;
        confidenceText: string | null;
    }[];
    message?: string | undefined;
}>;
export declare const paginatedAiContentJobListResponseSchema: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        contentId: z.ZodNullable<z.ZodString>;
        userId: z.ZodNullable<z.ZodString>;
        jobType: z.ZodEnum<["summarize", "extract_key_points", "generate_cross_references", "enhance_seo", "translate", "generate_questions", "create_outline", "fact_check"]>;
        parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
        priority: z.ZodEnum<["low", "normal", "high", "urgent"]>;
        status: z.ZodEnum<["pending", "processing", "completed", "failed", "cancelled"]>;
        result: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
        confidenceScore: z.ZodNullable<z.ZodString>;
        humanReviewed: z.ZodBoolean;
        humanApproved: z.ZodNullable<z.ZodBoolean>;
        reviewNotes: z.ZodNullable<z.ZodString>;
        aiModel: z.ZodString;
        tokensUsed: z.ZodNullable<z.ZodNumber>;
        processingCost: z.ZodNullable<z.ZodString>;
        errorMessage: z.ZodNullable<z.ZodString>;
        retryCount: z.ZodNumber;
        isPending: z.ZodBoolean;
        isProcessing: z.ZodBoolean;
        isCompleted: z.ZodBoolean;
        isFailed: z.ZodBoolean;
        isCancelled: z.ZodBoolean;
        hasError: z.ZodBoolean;
        needsHumanReview: z.ZodBoolean;
        isHighPriority: z.ZodBoolean;
        processingCostText: z.ZodNullable<z.ZodString>;
        confidenceText: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodString;
        startedAt: z.ZodNullable<z.ZodString>;
        completedAt: z.ZodNullable<z.ZodString>;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        status: "cancelled" | "pending" | "failed" | "completed" | "processing";
        createdAt: string;
        updatedAt: string;
        result: Record<string, any> | null;
        userId: string | null;
        startedAt: string | null;
        completedAt: string | null;
        priority: "low" | "high" | "normal" | "urgent";
        aiModel: string;
        isCompleted: boolean;
        contentId: string | null;
        confidenceText: string | null;
        jobType: "summarize" | "extract_key_points" | "generate_cross_references" | "enhance_seo" | "translate" | "generate_questions" | "create_outline" | "fact_check";
        parameters: Record<string, any>;
        confidenceScore: string | null;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        tokensUsed: number | null;
        processingCost: string | null;
        errorMessage: string | null;
        retryCount: number;
        isPending: boolean;
        isProcessing: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        hasError: boolean;
        needsHumanReview: boolean;
        isHighPriority: boolean;
        processingCostText: string | null;
    }, {
        id: string;
        status: "cancelled" | "pending" | "failed" | "completed" | "processing";
        createdAt: string;
        updatedAt: string;
        result: Record<string, any> | null;
        userId: string | null;
        startedAt: string | null;
        completedAt: string | null;
        priority: "low" | "high" | "normal" | "urgent";
        aiModel: string;
        isCompleted: boolean;
        contentId: string | null;
        confidenceText: string | null;
        jobType: "summarize" | "extract_key_points" | "generate_cross_references" | "enhance_seo" | "translate" | "generate_questions" | "create_outline" | "fact_check";
        parameters: Record<string, any>;
        confidenceScore: string | null;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        tokensUsed: number | null;
        processingCost: string | null;
        errorMessage: string | null;
        retryCount: number;
        isPending: boolean;
        isProcessing: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        hasError: boolean;
        needsHumanReview: boolean;
        isHighPriority: boolean;
        processingCostText: string | null;
    }>, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }>;
    success: z.ZodBoolean;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        id: string;
        status: "cancelled" | "pending" | "failed" | "completed" | "processing";
        createdAt: string;
        updatedAt: string;
        result: Record<string, any> | null;
        userId: string | null;
        startedAt: string | null;
        completedAt: string | null;
        priority: "low" | "high" | "normal" | "urgent";
        aiModel: string;
        isCompleted: boolean;
        contentId: string | null;
        confidenceText: string | null;
        jobType: "summarize" | "extract_key_points" | "generate_cross_references" | "enhance_seo" | "translate" | "generate_questions" | "create_outline" | "fact_check";
        parameters: Record<string, any>;
        confidenceScore: string | null;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        tokensUsed: number | null;
        processingCost: string | null;
        errorMessage: string | null;
        retryCount: number;
        isPending: boolean;
        isProcessing: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        hasError: boolean;
        needsHumanReview: boolean;
        isHighPriority: boolean;
        processingCostText: string | null;
    }[];
    message?: string | undefined;
}, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        id: string;
        status: "cancelled" | "pending" | "failed" | "completed" | "processing";
        createdAt: string;
        updatedAt: string;
        result: Record<string, any> | null;
        userId: string | null;
        startedAt: string | null;
        completedAt: string | null;
        priority: "low" | "high" | "normal" | "urgent";
        aiModel: string;
        isCompleted: boolean;
        contentId: string | null;
        confidenceText: string | null;
        jobType: "summarize" | "extract_key_points" | "generate_cross_references" | "enhance_seo" | "translate" | "generate_questions" | "create_outline" | "fact_check";
        parameters: Record<string, any>;
        confidenceScore: string | null;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        tokensUsed: number | null;
        processingCost: string | null;
        errorMessage: string | null;
        retryCount: number;
        isPending: boolean;
        isProcessing: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        hasError: boolean;
        needsHumanReview: boolean;
        isHighPriority: boolean;
        processingCostText: string | null;
    }[];
    message?: string | undefined;
}>;
export declare const paginatedAiCrossReferenceSuggestionListResponseSchema: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        sourceContentId: z.ZodString;
        targetContentId: z.ZodString;
        suggestedReferenceType: z.ZodEnum<["builds_on", "contradicts", "supports", "extends", "applies", "critiques", "synthesizes"]>;
        confidenceScore: z.ZodString;
        relevanceScore: z.ZodString;
        reasoning: z.ZodNullable<z.ZodString>;
        keyConnections: z.ZodNullable<z.ZodObject<{
            themes: z.ZodArray<z.ZodString, "many">;
            concepts: z.ZodArray<z.ZodString, "many">;
            scriptures: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            themes: string[];
            scriptures: string[];
            concepts: string[];
        }, {
            themes: string[];
            scriptures: string[];
            concepts: string[];
        }>>;
        humanReviewed: z.ZodBoolean;
        humanApproved: z.ZodNullable<z.ZodBoolean>;
        reviewNotes: z.ZodNullable<z.ZodString>;
        status: z.ZodEnum<["pending", "approved", "rejected", "implemented"]>;
        aiModel: z.ZodString;
        modelVersion: z.ZodNullable<z.ZodString>;
        isPending: z.ZodBoolean;
        isApproved: z.ZodBoolean;
        isRejected: z.ZodBoolean;
        isImplemented: z.ZodBoolean;
        needsReview: z.ZodBoolean;
        hasHighConfidence: z.ZodBoolean;
        hasHighRelevance: z.ZodBoolean;
        confidenceText: z.ZodString;
        relevanceText: z.ZodString;
        sourceContent: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            title: z.ZodString;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            slug: string;
            title: string;
        }, {
            id: string;
            slug: string;
            title: string;
        }>>;
        targetContent: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            title: z.ZodString;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            slug: string;
            title: string;
        }, {
            id: string;
            slug: string;
            title: string;
        }>>;
        createdAt: z.ZodString;
        reviewedAt: z.ZodNullable<z.ZodString>;
        implementedAt: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        status: "pending" | "approved" | "rejected" | "implemented";
        createdAt: string;
        aiModel: string;
        modelVersion: string | null;
        relevanceScore: string;
        confidenceText: string;
        confidenceScore: string;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        isPending: boolean;
        sourceContentId: string;
        targetContentId: string;
        suggestedReferenceType: "builds_on" | "contradicts" | "supports" | "extends" | "applies" | "critiques" | "synthesizes";
        reasoning: string | null;
        keyConnections: {
            themes: string[];
            scriptures: string[];
            concepts: string[];
        } | null;
        isApproved: boolean;
        isRejected: boolean;
        isImplemented: boolean;
        needsReview: boolean;
        hasHighConfidence: boolean;
        hasHighRelevance: boolean;
        relevanceText: string;
        reviewedAt: string | null;
        implementedAt: string | null;
        sourceContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
        targetContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
    }, {
        id: string;
        status: "pending" | "approved" | "rejected" | "implemented";
        createdAt: string;
        aiModel: string;
        modelVersion: string | null;
        relevanceScore: string;
        confidenceText: string;
        confidenceScore: string;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        isPending: boolean;
        sourceContentId: string;
        targetContentId: string;
        suggestedReferenceType: "builds_on" | "contradicts" | "supports" | "extends" | "applies" | "critiques" | "synthesizes";
        reasoning: string | null;
        keyConnections: {
            themes: string[];
            scriptures: string[];
            concepts: string[];
        } | null;
        isApproved: boolean;
        isRejected: boolean;
        isImplemented: boolean;
        needsReview: boolean;
        hasHighConfidence: boolean;
        hasHighRelevance: boolean;
        relevanceText: string;
        reviewedAt: string | null;
        implementedAt: string | null;
        sourceContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
        targetContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
    }>, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }>;
    success: z.ZodBoolean;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        id: string;
        status: "pending" | "approved" | "rejected" | "implemented";
        createdAt: string;
        aiModel: string;
        modelVersion: string | null;
        relevanceScore: string;
        confidenceText: string;
        confidenceScore: string;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        isPending: boolean;
        sourceContentId: string;
        targetContentId: string;
        suggestedReferenceType: "builds_on" | "contradicts" | "supports" | "extends" | "applies" | "critiques" | "synthesizes";
        reasoning: string | null;
        keyConnections: {
            themes: string[];
            scriptures: string[];
            concepts: string[];
        } | null;
        isApproved: boolean;
        isRejected: boolean;
        isImplemented: boolean;
        needsReview: boolean;
        hasHighConfidence: boolean;
        hasHighRelevance: boolean;
        relevanceText: string;
        reviewedAt: string | null;
        implementedAt: string | null;
        sourceContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
        targetContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
    }[];
    message?: string | undefined;
}, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        id: string;
        status: "pending" | "approved" | "rejected" | "implemented";
        createdAt: string;
        aiModel: string;
        modelVersion: string | null;
        relevanceScore: string;
        confidenceText: string;
        confidenceScore: string;
        humanReviewed: boolean;
        humanApproved: boolean | null;
        reviewNotes: string | null;
        isPending: boolean;
        sourceContentId: string;
        targetContentId: string;
        suggestedReferenceType: "builds_on" | "contradicts" | "supports" | "extends" | "applies" | "critiques" | "synthesizes";
        reasoning: string | null;
        keyConnections: {
            themes: string[];
            scriptures: string[];
            concepts: string[];
        } | null;
        isApproved: boolean;
        isRejected: boolean;
        isImplemented: boolean;
        needsReview: boolean;
        hasHighConfidence: boolean;
        hasHighRelevance: boolean;
        relevanceText: string;
        reviewedAt: string | null;
        implementedAt: string | null;
        sourceContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
        targetContent?: {
            id: string;
            slug: string;
            title: string;
        } | undefined;
    }[];
    message?: string | undefined;
}>;
export declare const paginatedTheologicalConceptListResponseSchema: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        slug: z.ZodString;
        definition: z.ZodNullable<z.ZodString>;
        conceptType: z.ZodEnum<["doctrine", "practice", "tradition", "movement", "person", "event", "text"]>;
        theologicalTradition: z.ZodArray<z.ZodString, "many">;
        biblicalReferences: z.ZodArray<z.ZodString, "many">;
        historicalPeriod: z.ZodNullable<z.ZodString>;
        relatedConcepts: z.ZodArray<z.ZodString, "many">;
        synonyms: z.ZodArray<z.ZodString, "many">;
        apestRelevance: z.ZodObject<{
            apostolic: z.ZodNumber;
            prophetic: z.ZodNumber;
            evangelistic: z.ZodNumber;
            shepherding: z.ZodNumber;
            teaching: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            apostolic: number;
            prophetic: number;
            evangelistic: number;
            shepherding: number;
            teaching: number;
        }, {
            apostolic: number;
            prophetic: number;
            evangelistic: number;
            shepherding: number;
            teaching: number;
        }>;
        contentReferences: z.ZodNumber;
        searchCount: z.ZodNumber;
        hasDefinition: z.ZodBoolean;
        hasRelatedConcepts: z.ZodBoolean;
        hasSynonyms: z.ZodBoolean;
        hasBiblicalReferences: z.ZodBoolean;
        isFrequentlyUsed: z.ZodBoolean;
        primaryApestDimension: z.ZodString;
        apestRelevanceText: z.ZodString;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        apestRelevance: {
            apostolic: number;
            prophetic: number;
            evangelistic: number;
            shepherding: number;
            teaching: number;
        };
        createdAt: string;
        updatedAt: string;
        theologicalTradition: string[];
        definition: string | null;
        conceptType: "text" | "doctrine" | "practice" | "tradition" | "movement" | "person" | "event";
        biblicalReferences: string[];
        historicalPeriod: string | null;
        relatedConcepts: string[];
        synonyms: string[];
        contentReferences: number;
        searchCount: number;
        hasDefinition: boolean;
        hasRelatedConcepts: boolean;
        hasSynonyms: boolean;
        hasBiblicalReferences: boolean;
        isFrequentlyUsed: boolean;
        primaryApestDimension: string;
        apestRelevanceText: string;
    }, {
        name: string;
        id: string;
        slug: string;
        apestRelevance: {
            apostolic: number;
            prophetic: number;
            evangelistic: number;
            shepherding: number;
            teaching: number;
        };
        createdAt: string;
        updatedAt: string;
        theologicalTradition: string[];
        definition: string | null;
        conceptType: "text" | "doctrine" | "practice" | "tradition" | "movement" | "person" | "event";
        biblicalReferences: string[];
        historicalPeriod: string | null;
        relatedConcepts: string[];
        synonyms: string[];
        contentReferences: number;
        searchCount: number;
        hasDefinition: boolean;
        hasRelatedConcepts: boolean;
        hasSynonyms: boolean;
        hasBiblicalReferences: boolean;
        isFrequentlyUsed: boolean;
        primaryApestDimension: string;
        apestRelevanceText: string;
    }>, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }, {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }>;
    success: z.ZodBoolean;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        name: string;
        id: string;
        slug: string;
        apestRelevance: {
            apostolic: number;
            prophetic: number;
            evangelistic: number;
            shepherding: number;
            teaching: number;
        };
        createdAt: string;
        updatedAt: string;
        theologicalTradition: string[];
        definition: string | null;
        conceptType: "text" | "doctrine" | "practice" | "tradition" | "movement" | "person" | "event";
        biblicalReferences: string[];
        historicalPeriod: string | null;
        relatedConcepts: string[];
        synonyms: string[];
        contentReferences: number;
        searchCount: number;
        hasDefinition: boolean;
        hasRelatedConcepts: boolean;
        hasSynonyms: boolean;
        hasBiblicalReferences: boolean;
        isFrequentlyUsed: boolean;
        primaryApestDimension: string;
        apestRelevanceText: string;
    }[];
    message?: string | undefined;
}, {
    pagination: {
        limit: number;
        total: number;
        page: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
    success: boolean;
    items: {
        name: string;
        id: string;
        slug: string;
        apestRelevance: {
            apostolic: number;
            prophetic: number;
            evangelistic: number;
            shepherding: number;
            teaching: number;
        };
        createdAt: string;
        updatedAt: string;
        theologicalTradition: string[];
        definition: string | null;
        conceptType: "text" | "doctrine" | "practice" | "tradition" | "movement" | "person" | "event";
        biblicalReferences: string[];
        historicalPeriod: string | null;
        relatedConcepts: string[];
        synonyms: string[];
        contentReferences: number;
        searchCount: number;
        hasDefinition: boolean;
        hasRelatedConcepts: boolean;
        hasSynonyms: boolean;
        hasBiblicalReferences: boolean;
        isFrequentlyUsed: boolean;
        primaryApestDimension: string;
        apestRelevanceText: string;
    }[];
    message?: string | undefined;
}>;
export type AiConversationResponse = z.infer<typeof aiConversationResponseSchema>;
export type AiMessageResponse = z.infer<typeof aiMessageResponseSchema>;
export type AiContentJobResponse = z.infer<typeof aiContentJobResponseSchema>;
export type AiCrossReferenceSuggestionResponse = z.infer<typeof aiCrossReferenceSuggestionResponseSchema>;
export type TheologicalConceptResponse = z.infer<typeof theologicalConceptResponseSchema>;
export type PaginatedAiConversationListResponse = z.infer<typeof paginatedAiConversationListResponseSchema>;
export type PaginatedAiMessageListResponse = z.infer<typeof paginatedAiMessageListResponseSchema>;
export type PaginatedAiContentJobListResponse = z.infer<typeof paginatedAiContentJobListResponseSchema>;
export type PaginatedAiCrossReferenceSuggestionListResponse = z.infer<typeof paginatedAiCrossReferenceSuggestionListResponseSchema>;
export type PaginatedTheologicalConceptListResponse = z.infer<typeof paginatedTheologicalConceptListResponseSchema>;
//# sourceMappingURL=ai.response.d.ts.map
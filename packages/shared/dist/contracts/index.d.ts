export type { Attachment, CulturalContext, OrganizationType, MembershipRole as SharedMembershipRole, MinistryRole as SharedMinistryRole, SubscriptionStatus as SharedSubscriptionStatus, Visibility, } from '../../validations/shared';
export type { NewOrganization, NewOrganizationMembership, NewUserProfile, Organization, OrganizationMembership, UserProfile, } from '../../validations/auth';
export type { Assessment, AssessmentQuestion, AssessmentResponse, AssessmentSearch, AssessmentWithQuestions, CompleteAssessmentInput, NewAssessment, NewAssessmentQuestion, NewAssessmentResponse, NewUserAssessment, SaveResponsesInput, StartAssessmentInput, UserAssessment, UserAssessmentFilters, } from '../../validations/assessments';
export type { AssessmentSearchRequest, CompleteAssessmentRequest, CreateAssessmentQuestionRequest, CreateAssessmentRequest, SaveAssessmentResponsesRequest, StartAssessmentRequest, UpdateAssessmentQuestionRequest, UpdateAssessmentRequest, UserAssessmentFiltersRequest, } from './assessments.request';
export type { AssessmentQuestionResponse, AssessmentResponse as AssessmentResponseDTO, AssessmentResponseResponse, AssessmentWithQuestionsResponse, PaginatedAssessmentListResponse, PaginatedUserAssessmentListResponse, UserAssessmentResponse, UserAssessmentWithDetailsResponse, } from './assessments.response';
export type { ApestScoreResult, ApestScores as ScoringApestScores, } from './scoring';
export type { ContentCategory, ContentCrossReference, ContentItem, ContentSeries, NewContentCategory, NewContentCrossReference, NewContentItem, NewContentSeries, NewSeriesContentItem, SeriesContentItem, } from '../../validations/content';
export type { AiContentJob, AiConversation, AiCrossReferenceSuggestion, AiMessage, NewAiContentJob, NewAiConversation, NewAiCrossReferenceSuggestion, NewAiMessage, NewTheologicalConcept, TheologicalConcept, } from '../../validations/ai';
export type { Collaboration, Community, CommunityMembership, CommunityPost, CommunityPostVote, NewCollaboration, NewCommunity, NewCommunityMembership, NewCommunityPost, NewCommunityPostVote, } from '../../validations/community';
export type { Coupon, NewCoupon, NewPaymentMethod, NewSubscriptionPlan, NewTransaction, NewUserSubscription, PaymentMethod, SubscriptionPlan, Transaction, UserSubscription, } from '../../validations/subscriptions';
export type { LearningOutcome, MovementMetric, NewLearningOutcome, NewMovementMetric, NewPerformanceReport, NewUserAnalyticsEvent, NewUserContentInteraction, PerformanceReport, UserAnalyticsEvent, UserContentInteraction, } from '../../validations/analytics';
export type { ApiKey, AuditLog, FeatureFlag, NewApiKey, NewAuditLog, NewFeatureFlag, NewSystemNotification, NewUserConsent, NewUserFeatureFlag, NewUserNotificationStatus, SystemNotification, UserConsent, UserFeatureFlag, UserNotificationStatus, } from '../../validations/system';
export { attachmentSchema, culturalContextSchema, membershipRoleSchema, ministryRoleSchema, organizationTypeSchema, subscriptionStatusSchema, visibilitySchema, } from '../../validations/shared';
export { newOrganizationMembershipSchema, newOrganizationSchema, newUserProfileSchema, organizationMembershipSchema, organizationSchema, userProfileSchema, } from '../../validations/auth';
export { assessmentQuestionSchema, assessmentSchema, assessmentSearchSchema, assessmentWithQuestionsSchema, completeAssessmentInputSchema, newAssessmentQuestionSchema, newAssessmentResponseSchema, newAssessmentSchema, newUserAssessmentSchema, saveResponsesInputSchema, startAssessmentInputSchema, userAssessmentFiltersSchema, userAssessmentSchema, } from '../../validations/assessments';
export { assessmentSearchRequestSchema, completeAssessmentRequestSchema, createAssessmentQuestionRequestSchema, createAssessmentRequestSchema, saveAssessmentResponsesRequestSchema, startAssessmentRequestSchema, updateAssessmentQuestionRequestSchema, updateAssessmentRequestSchema, userAssessmentFiltersRequestSchema, } from './assessments.request';
export { assessmentQuestionResponseSchema, assessmentResponseSchema as assessmentResponseDTOSchema, assessmentResponseResponseSchema, assessmentWithQuestionsResponseSchema, paginatedAssessmentListResponseSchema, paginatedUserAssessmentListResponseSchema, userAssessmentResponseSchema, userAssessmentWithDetailsResponseSchema, } from './assessments.response';
export { contentCategorySchema, contentCrossReferenceSchema, contentItemSchema, contentSeriesSchema, newContentCategorySchema, newContentCrossReferenceSchema, newContentItemSchema, newContentSeriesSchema, newSeriesContentItemSchema, seriesContentItemSchema, } from '../../validations/content';
export { contentSearchRequestSchema, createContentCategoryRequestSchema, createContentItemRequestSchema, createContentSeriesRequestSchema, updateContentCategoryRequestSchema, updateContentItemRequestSchema, updateContentSeriesRequestSchema, } from './content.request';
export { contentCategoryResponseSchema, contentItemResponseSchema, contentSeriesResponseSchema, paginatedContentCategoryListResponseSchema, paginatedContentItemListResponseSchema, paginatedContentSeriesListResponseSchema, } from './content.response';
export type { ContentCategoryResponse, ContentItemResponse, ContentSeriesResponse, PaginatedContentCategoryListResponse, PaginatedContentItemListResponse, PaginatedContentSeriesListResponse, } from './content.response';
export { aiContentJobSchema, aiConversationSchema, aiCrossReferenceSuggestionSchema, aiMessageSchema, newAiContentJobSchema, newAiConversationSchema, newAiCrossReferenceSuggestionSchema, newAiMessageSchema, newTheologicalConceptSchema, theologicalConceptSchema, } from '../../validations/ai';
export { aiContentJobResponseSchema, aiConversationResponseSchema, aiCrossReferenceSuggestionResponseSchema, aiMessageResponseSchema, paginatedAiContentJobListResponseSchema, paginatedAiConversationListResponseSchema, paginatedAiCrossReferenceSuggestionListResponseSchema, paginatedAiMessageListResponseSchema, paginatedTheologicalConceptListResponseSchema, theologicalConceptResponseSchema, } from './ai.response';
export type { AiContentJobResponse, AiConversationResponse, AiCrossReferenceSuggestionResponse, AiMessageResponse, PaginatedAiContentJobListResponse, PaginatedAiConversationListResponse, PaginatedAiCrossReferenceSuggestionListResponse, PaginatedAiMessageListResponse, PaginatedTheologicalConceptListResponse, TheologicalConceptResponse, } from './ai.response';
export { collaborationSchema, communityMembershipSchema, communityPostSchema, communityPostVoteSchema, communitySchema, newCollaborationSchema, newCommunityMembershipSchema, newCommunityPostSchema, newCommunityPostVoteSchema, newCommunitySchema, } from '../../validations/community';
export { newPaymentMethodSchema, newSubscriptionPlanSchema, newTransactionSchema, newUserSubscriptionSchema, paymentMethodSchema, subscriptionPlanSchema, transactionSchema, userSubscriptionSchema, } from '../../validations/subscriptions';
export { newUserAnalyticsEventSchema, newUserContentInteractionSchema, userAnalyticsEventSchema, userContentInteractionSchema, } from '../../validations/analytics';
export { apiKeySchema, auditLogSchema, featureFlagSchema, newApiKeySchema, newAuditLogSchema, newFeatureFlagSchema, newSystemNotificationSchema, newUserConsentSchema, newUserFeatureFlagSchema, newUserNotificationStatusSchema, systemNotificationSchema, userConsentSchema, userFeatureFlagSchema, userNotificationStatusSchema, } from '../../validations/system';
import type { InferInsertModel, InferSelectModel } from 'drizzle-orm';
import { aiContentJobs, aiConversations, aiCrossReferenceSuggestions, aiMessages, apiKeys, assessmentQuestions, assessmentResponses, assessments, auditLogs, collaborations, communities, communityMemberships, communityPostVotes, communityPosts, contentCategories, contentCrossReferences, contentItems, contentSeries, coupons, featureFlags, learningOutcomes, movementMetrics, organizationMemberships, organizations, paymentMethods, performanceReports, seriesContentItems, subscriptionPlans, systemNotifications, theologicalConcepts, transactions, userAnalyticsEvents, userAssessments, userConsents, userContentInteractions, userFeatureFlags, userNotificationStatus, userProfiles, userSubscriptions } from '../db/schema';
export type UserProfileRow = InferSelectModel<typeof userProfiles>;
export type UserProfileInsert = InferInsertModel<typeof userProfiles>;
export type OrganizationRow = InferSelectModel<typeof organizations>;
export type OrganizationInsert = InferInsertModel<typeof organizations>;
export type OrganizationMembershipRow = InferSelectModel<typeof organizationMemberships>;
export type OrganizationMembershipInsert = InferInsertModel<typeof organizationMemberships>;
export type AssessmentRow = InferSelectModel<typeof assessments>;
export type AssessmentInsert = InferInsertModel<typeof assessments>;
export type AssessmentQuestionRow = InferSelectModel<typeof assessmentQuestions>;
export type AssessmentQuestionInsert = InferInsertModel<typeof assessmentQuestions>;
export type UserAssessmentRow = InferSelectModel<typeof userAssessments>;
export type UserAssessmentInsert = InferInsertModel<typeof userAssessments>;
export type AssessmentResponseRow = InferSelectModel<typeof assessmentResponses>;
export type AssessmentResponseInsert = InferInsertModel<typeof assessmentResponses>;
export type ContentCategoryRow = InferSelectModel<typeof contentCategories>;
export type ContentCategoryInsert = InferInsertModel<typeof contentCategories>;
export type ContentSeriesRow = InferSelectModel<typeof contentSeries>;
export type ContentSeriesInsert = InferInsertModel<typeof contentSeries>;
export type ContentItemRow = InferSelectModel<typeof contentItems>;
export type ContentItemInsert = InferInsertModel<typeof contentItems>;
export type SeriesContentItemRow = InferSelectModel<typeof seriesContentItems>;
export type SeriesContentItemInsert = InferInsertModel<typeof seriesContentItems>;
export type ContentCrossReferenceRow = InferSelectModel<typeof contentCrossReferences>;
export type ContentCrossReferenceInsert = InferInsertModel<typeof contentCrossReferences>;
export type AiConversationRow = InferSelectModel<typeof aiConversations>;
export type AiConversationInsert = InferInsertModel<typeof aiConversations>;
export type AiMessageRow = InferSelectModel<typeof aiMessages>;
export type AiMessageInsert = InferInsertModel<typeof aiMessages>;
export type AiContentJobRow = InferSelectModel<typeof aiContentJobs>;
export type AiContentJobInsert = InferInsertModel<typeof aiContentJobs>;
export type AiCrossReferenceSuggestionRow = InferSelectModel<typeof aiCrossReferenceSuggestions>;
export type AiCrossReferenceSuggestionInsert = InferInsertModel<typeof aiCrossReferenceSuggestions>;
export type TheologicalConceptRow = InferSelectModel<typeof theologicalConcepts>;
export type TheologicalConceptInsert = InferInsertModel<typeof theologicalConcepts>;
export type CommunityRow = InferSelectModel<typeof communities>;
export type CommunityInsert = InferInsertModel<typeof communities>;
export type CommunityMembershipRow = InferSelectModel<typeof communityMemberships>;
export type CommunityMembershipInsert = InferInsertModel<typeof communityMemberships>;
export type CommunityPostRow = InferSelectModel<typeof communityPosts>;
export type CommunityPostInsert = InferInsertModel<typeof communityPosts>;
export type CommunityPostVoteRow = InferSelectModel<typeof communityPostVotes>;
export type CommunityPostVoteInsert = InferInsertModel<typeof communityPostVotes>;
export type CollaborationRow = InferSelectModel<typeof collaborations>;
export type CollaborationInsert = InferInsertModel<typeof collaborations>;
export type SubscriptionPlanRow = InferSelectModel<typeof subscriptionPlans>;
export type SubscriptionPlanInsert = InferInsertModel<typeof subscriptionPlans>;
export type UserSubscriptionRow = InferSelectModel<typeof userSubscriptions>;
export type UserSubscriptionInsert = InferInsertModel<typeof userSubscriptions>;
export type TransactionRow = InferSelectModel<typeof transactions>;
export type TransactionInsert = InferInsertModel<typeof transactions>;
export type PaymentMethodRow = InferSelectModel<typeof paymentMethods>;
export type PaymentMethodInsert = InferInsertModel<typeof paymentMethods>;
export type CouponRow = InferSelectModel<typeof coupons>;
export type CouponInsert = InferInsertModel<typeof coupons>;
export type UserAnalyticsEventRow = InferSelectModel<typeof userAnalyticsEvents>;
export type UserAnalyticsEventInsert = InferInsertModel<typeof userAnalyticsEvents>;
export type UserContentInteractionRow = InferSelectModel<typeof userContentInteractions>;
export type UserContentInteractionInsert = InferInsertModel<typeof userContentInteractions>;
export type LearningOutcomeRow = InferSelectModel<typeof learningOutcomes>;
export type LearningOutcomeInsert = InferInsertModel<typeof learningOutcomes>;
export type MovementMetricRow = InferSelectModel<typeof movementMetrics>;
export type MovementMetricInsert = InferInsertModel<typeof movementMetrics>;
export type PerformanceReportRow = InferSelectModel<typeof performanceReports>;
export type PerformanceReportInsert = InferInsertModel<typeof performanceReports>;
export type AuditLogRow = InferSelectModel<typeof auditLogs>;
export type AuditLogInsert = InferInsertModel<typeof auditLogs>;
export type FeatureFlagRow = InferSelectModel<typeof featureFlags>;
export type FeatureFlagInsert = InferInsertModel<typeof featureFlags>;
export type UserFeatureFlagRow = InferSelectModel<typeof userFeatureFlags>;
export type UserFeatureFlagInsert = InferInsertModel<typeof userFeatureFlags>;
export type UserConsentRow = InferSelectModel<typeof userConsents>;
export type UserConsentInsert = InferInsertModel<typeof userConsents>;
export type SystemNotificationRow = InferSelectModel<typeof systemNotifications>;
export type SystemNotificationInsert = InferInsertModel<typeof systemNotifications>;
export type UserNotificationStatusRow = InferSelectModel<typeof userNotificationStatus>;
export type UserNotificationStatusInsert = InferInsertModel<typeof userNotificationStatus>;
export type ApiKeyRow = InferSelectModel<typeof apiKeys>;
export type ApiKeyInsert = InferInsertModel<typeof apiKeys>;
export * from './api-responses';
export type { MinistryAssessment, MinistryCommunity, MinistryContentItem, MinistryMetrics, MinistryOrganization, MinistryUserProfile, OrganizationContext, } from '../../validations/ministry-platform';
export type { CompleteMinistryAssessmentRequest, CreateMinistryCollaborationRequest, CreateMinistryCommunityRequest, CreateMinistryContentRequest, CreateMinistryOrganizationRequest, CreateMinistrySubscriptionRequest, InviteOrganizationMemberRequest, JoinMinistryCommunityRequest, MinistryAnalyticsRequest, MinistryPlatformSearchRequest, StartMinistryAssessmentRequest, UpdateMinistryCollaborationRequest, UpdateMinistryCommunityRequest, UpdateMinistryContentRequest, UpdateMinistryOrganizationRequest, UpdateMinistrySubscriptionRequest, UpdateMinistryUserProfileRequest, } from './ministry-platform.request';
export type { AggregatedMinistryMetricsResponse, AuthMinistryCombinedResponse, MinistryAssessmentListResponse, MinistryAssessmentResponse, MinistryCommunityListResponse, MinistryCommunityResponse, MinistryContentItemListResponse, MinistryContentItemResponse, MinistryDashboardResponse, MinistryMetricsResponse, MinistryOrganizationListResponse, MinistryOrganizationMembershipResponse, MinistryOrganizationResponse, MinistryPaginatedResponse, MinistryPlatformResponse, MinistrySubscriptionPlanResponse, MinistryUserAssessmentResponse, MinistryUserProfileListResponse, MinistryUserProfileResponse, OrganizationScopedResponse, PlantFilteredResponse, RoleBasedVisibilityResponse, } from './ministry-platform.response';
export { completeMinistryAssessmentRequestSchema, createMinistryCollaborationRequestSchema, createMinistryCommunityRequestSchema, createMinistryContentRequestSchema, createMinistryOrganizationRequestSchema, createMinistrySubscriptionRequestSchema, inviteOrganizationMemberRequestSchema, joinMinistryCommunityRequestSchema, ministryAnalyticsRequestSchema, ministryPlatformSearchRequestSchema, startMinistryAssessmentRequestSchema, updateMinistryCollaborationRequestSchema, updateMinistryCommunityRequestSchema, updateMinistryContentRequestSchema, updateMinistryOrganizationRequestSchema, updateMinistrySubscriptionRequestSchema, updateMinistryUserProfileRequestSchema, } from './ministry-platform.request';
export { aggregatedMinistryMetricsResponseSchema, authMinistryCombinedResponseSchema, ministryAssessmentResponseSchema, ministryAssessmentWithQuestionsResponseSchema, ministryCommunityResponseSchema, ministryContentItemResponseSchema, ministryDashboardResponseSchema, ministryMetricsResponseSchema, ministryOrganizationListResponseSchema, ministryOrganizationMembershipResponseSchema, ministryOrganizationResponseSchema, ministryPaginatedResponseSchema, ministryPlatformErrorResponseSchema, ministryPlatformResponseSchema, ministrySubscriptionPlanResponseSchema, ministryUserAssessmentResponseSchema, ministryUserProfileListResponseSchema, ministryUserProfileResponseSchema, organizationScopedResponseSchema, plantFilteredResponseSchema, roleBasedVisibilityResponseSchema, } from './ministry-platform.response';
export type UserId = string;
export type OrganizationId = string;
export type ContentId = string;
export type AssessmentId = string;
export type CommunityId = string;
export type SubscriptionId = string;
export type AccountStatus = 'active' | 'inactive' | 'suspended' | 'pending_verification';
export type SubscriptionStatus = 'active' | 'cancelled' | 'past_due' | 'unpaid' | 'trialing' | 'paused';
export type ContentStatus = 'draft' | 'published' | 'archived' | 'under_review' | 'scheduled';
export type MembershipRole = 'owner' | 'admin' | 'member' | 'viewer';
export type MinistryRole = 'senior_pastor' | 'associate_pastor' | 'church_planter' | 'denominational_leader' | 'seminary_professor' | 'seminary_student' | 'ministry_staff' | 'missionary' | 'marketplace_minister' | 'nonprofit_leader' | 'consultant' | 'academic_researcher' | 'emerging_leader' | 'other';
export type ApestDimension = 'apostolic' | 'prophetic' | 'evangelistic' | 'shepherding' | 'teaching';
export type ApestScores = {
    apostolic: number;
    prophetic: number;
    evangelistic: number;
    shepherding: number;
    teaching: number;
};
export type CreateInput<T> = Omit<T, 'id' | 'createdAt' | 'updatedAt'>;
export type UpdateInput<T> = Partial<CreateInput<T>>;
export type EntityWithId<T> = T & {
    id: string;
};
export interface DataState<T> {
    data: T | null;
    isLoading: boolean;
    error: string | null;
    isSuccess: boolean;
    isError: boolean;
}
export interface PaginatedDataState<T> extends DataState<T[]> {
    pagination?: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
}
export type PaginationParams = {
    page?: number;
    limit?: number;
    offset?: number;
};
export type PaginatedResponse<T> = {
    data: T[];
    pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
};
export type ApiResponse<T> = {
    success: boolean;
    data?: T;
    error?: string;
    message?: string;
};
export type ApiError = {
    code: string;
    message: string;
    details?: Record<string, any>;
};
export type ContentRowDTO = import('../../validations/content').ContentItem & {
    author: {
        id: string;
        firstName: string;
        lastName: string;
        displayName?: string;
        avatarUrl?: string;
    };
    category?: {
        id: string;
        name: string;
        slug: string;
    };
};
export type UserProfileRowDTO = import('../../validations/auth').UserProfile;
export type AssessmentRowDTO = import('../../validations/assessments').Assessment;
export type UserAssessmentRowDTO = import('../../validations/assessments').UserAssessment & {
    assessment: {
        id: string;
        name: string;
        slug: string;
    };
    user: {
        id: string;
        firstName: string;
        lastName: string;
        displayName?: string;
    };
};
export type OrganizationRowDTO = import('../../validations/auth').Organization;
export type CommunityRowDTO = import('../../validations/community').Community;
//# sourceMappingURL=index.d.ts.map
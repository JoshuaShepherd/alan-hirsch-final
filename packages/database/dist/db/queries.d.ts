import { userProfiles } from './schema';
export declare function getUser(): Promise<typeof userProfiles.$inferSelect | null>;
export declare function getUserById(userId: string): Promise<typeof userProfiles.$inferSelect | null>;
export declare function getUserByEmail(email: string): Promise<typeof userProfiles.$inferSelect | null>;
export declare function updateUserLastActive(userId: string): Promise<void>;
export declare function getPublishedContent(limit?: number, offset?: number): Promise<{
    content: {
        id: string;
        title: string;
        slug: string;
        excerpt: string | null;
        content: string | null;
        authorId: string;
        coAuthors: string[] | null;
        contentType: "framework" | "article" | "video" | "podcast" | "tool" | "case_study" | "interview" | "course_lesson";
        format: "text" | "video" | "audio" | "interactive" | "pdf" | "presentation" | null;
        wordCount: number | null;
        estimatedReadingTime: number | null;
        viewCount: number | null;
        likeCount: number | null;
        shareCount: number | null;
        commentCount: number | null;
        bookmarkCount: number | null;
        primaryCategoryId: string | null;
        secondaryCategories: string[] | null;
        tags: string[] | null;
        theologicalThemes: string[] | null;
        seriesId: string | null;
        seriesOrder: number | null;
        visibility: "organization" | "public" | "premium" | "vip" | "private" | "invite_only" | null;
        status: "draft" | "archived" | "under_review" | "published" | "scheduled" | null;
        networkAmplificationScore: string | null;
        crossReferenceCount: number | null;
        aiEnhanced: boolean | null;
        aiSummary: string | null;
        aiKeyPoints: string[] | null;
        featuredImageUrl: string | null;
        videoUrl: string | null;
        audioUrl: string | null;
        attachments: {
            name: string;
            url: string;
            type: string;
            size: number;
        }[] | null;
        metaTitle: string | null;
        metaDescription: string | null;
        canonicalUrl: string | null;
        originalSource: string | null;
        licenseType: "all_rights_reserved" | "creative_commons" | "public_domain" | "fair_use" | null;
        attributionRequired: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        publishedAt: Date | null;
        scheduledAt: Date | null;
    };
    author: {
        id: string;
        displayName: string;
        subdomain: string;
        avatarUrl: string;
    } | null;
    category: {
        id: any;
        name: any;
        slug: any;
    } | null;
}[]>;
export declare function getContentBySlug(slug: string): Promise<{
    content: {
        id: string;
        title: string;
        slug: string;
        excerpt: string | null;
        content: string | null;
        authorId: string;
        coAuthors: string[] | null;
        contentType: "framework" | "article" | "video" | "podcast" | "tool" | "case_study" | "interview" | "course_lesson";
        format: "text" | "video" | "audio" | "interactive" | "pdf" | "presentation" | null;
        wordCount: number | null;
        estimatedReadingTime: number | null;
        viewCount: number | null;
        likeCount: number | null;
        shareCount: number | null;
        commentCount: number | null;
        bookmarkCount: number | null;
        primaryCategoryId: string | null;
        secondaryCategories: string[] | null;
        tags: string[] | null;
        theologicalThemes: string[] | null;
        seriesId: string | null;
        seriesOrder: number | null;
        visibility: "organization" | "public" | "premium" | "vip" | "private" | "invite_only" | null;
        status: "draft" | "archived" | "under_review" | "published" | "scheduled" | null;
        networkAmplificationScore: string | null;
        crossReferenceCount: number | null;
        aiEnhanced: boolean | null;
        aiSummary: string | null;
        aiKeyPoints: string[] | null;
        featuredImageUrl: string | null;
        videoUrl: string | null;
        audioUrl: string | null;
        attachments: {
            name: string;
            url: string;
            type: string;
            size: number;
        }[] | null;
        metaTitle: string | null;
        metaDescription: string | null;
        canonicalUrl: string | null;
        originalSource: string | null;
        licenseType: "all_rights_reserved" | "creative_commons" | "public_domain" | "fair_use" | null;
        attributionRequired: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        publishedAt: Date | null;
        scheduledAt: Date | null;
    };
    author: {
        id: string;
        displayName: string;
        subdomain: string;
        avatarUrl: string;
        bio: string;
    } | null;
    category: any;
} | null>;
export declare function getContentByAuthor(authorId: string, limit?: number): Promise<{
    id: string;
    title: string;
    slug: string;
    excerpt: string | null;
    content: string | null;
    authorId: string;
    coAuthors: string[] | null;
    contentType: "framework" | "article" | "video" | "podcast" | "tool" | "case_study" | "interview" | "course_lesson";
    format: "text" | "video" | "audio" | "interactive" | "pdf" | "presentation" | null;
    wordCount: number | null;
    estimatedReadingTime: number | null;
    viewCount: number | null;
    likeCount: number | null;
    shareCount: number | null;
    commentCount: number | null;
    bookmarkCount: number | null;
    primaryCategoryId: string | null;
    secondaryCategories: string[] | null;
    tags: string[] | null;
    theologicalThemes: string[] | null;
    seriesId: string | null;
    seriesOrder: number | null;
    visibility: "organization" | "public" | "premium" | "vip" | "private" | "invite_only" | null;
    status: "draft" | "archived" | "under_review" | "published" | "scheduled" | null;
    networkAmplificationScore: string | null;
    crossReferenceCount: number | null;
    aiEnhanced: boolean | null;
    aiSummary: string | null;
    aiKeyPoints: string[] | null;
    featuredImageUrl: string | null;
    videoUrl: string | null;
    audioUrl: string | null;
    attachments: {
        name: string;
        url: string;
        type: string;
        size: number;
    }[] | null;
    metaTitle: string | null;
    metaDescription: string | null;
    canonicalUrl: string | null;
    originalSource: string | null;
    licenseType: "all_rights_reserved" | "creative_commons" | "public_domain" | "fair_use" | null;
    attributionRequired: boolean | null;
    createdAt: Date;
    updatedAt: Date;
    publishedAt: Date | null;
    scheduledAt: Date | null;
}[]>;
export declare function searchContent(query: string, limit?: number): Promise<{
    content: {
        id: string;
        title: string;
        slug: string;
        excerpt: string | null;
        content: string | null;
        authorId: string;
        coAuthors: string[] | null;
        contentType: "framework" | "article" | "video" | "podcast" | "tool" | "case_study" | "interview" | "course_lesson";
        format: "text" | "video" | "audio" | "interactive" | "pdf" | "presentation" | null;
        wordCount: number | null;
        estimatedReadingTime: number | null;
        viewCount: number | null;
        likeCount: number | null;
        shareCount: number | null;
        commentCount: number | null;
        bookmarkCount: number | null;
        primaryCategoryId: string | null;
        secondaryCategories: string[] | null;
        tags: string[] | null;
        theologicalThemes: string[] | null;
        seriesId: string | null;
        seriesOrder: number | null;
        visibility: "organization" | "public" | "premium" | "vip" | "private" | "invite_only" | null;
        status: "draft" | "archived" | "under_review" | "published" | "scheduled" | null;
        networkAmplificationScore: string | null;
        crossReferenceCount: number | null;
        aiEnhanced: boolean | null;
        aiSummary: string | null;
        aiKeyPoints: string[] | null;
        featuredImageUrl: string | null;
        videoUrl: string | null;
        audioUrl: string | null;
        attachments: {
            name: string;
            url: string;
            type: string;
            size: number;
        }[] | null;
        metaTitle: string | null;
        metaDescription: string | null;
        canonicalUrl: string | null;
        originalSource: string | null;
        licenseType: "all_rights_reserved" | "creative_commons" | "public_domain" | "fair_use" | null;
        attributionRequired: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        publishedAt: Date | null;
        scheduledAt: Date | null;
    };
    author: {
        displayName: string;
        subdomain: string;
    } | null;
}[]>;
export declare function getActiveAssessments(): Promise<unknown[]>;
export declare function getUserAssessments(userId: string): Promise<any[]>;
export declare function getLatestAPESTAssessment(userId: string): Promise<any>;
export * from './queries/assessments';
export declare function getActiveSubscriptionPlans(): Promise<{
    id: string;
    name: string;
    slug: string;
    description: string | null;
    planType: "free" | "individual" | "professional" | "leader" | "institutional" | "enterprise";
    priceMonthly: string | null;
    priceAnnual: string | null;
    currency: string | null;
    contentAccessLevel: "free" | "leader" | "premium" | "vip" | "all";
    features: {
        contentLimit?: number | null;
        aiInteractions: number;
        communityAccess: boolean;
        collaborationTools: boolean;
        analytics: boolean;
        customBranding: boolean;
        apiAccess: boolean;
        prioritySupport: boolean;
        downloadContent: boolean;
        offlineAccess: boolean;
    };
    maxUsers: number | null;
    storageLimit: number | null;
    bandwidthLimit: number | null;
    stripeProductId: string | null;
    stripePriceIdMonthly: string | null;
    stripePriceIdAnnual: string | null;
    isActive: boolean | null;
    isPopular: boolean | null;
    sortOrder: number | null;
    trialDays: number | null;
    createdAt: Date;
    updatedAt: Date;
}[]>;
export declare function getUserSubscription(userId: string): Promise<{
    subscription: {
        id: string;
        userId: string;
        planId: string;
        leaderProfileId: string | null;
        organizationId: string | null;
        status: "active" | "cancelled" | "past_due" | "unpaid" | "trialing" | "paused";
        amount: string;
        currency: string | null;
        billingCycle: "monthly" | "annual";
        aiInteractionsUsed: number | null;
        aiInteractionsLimit: number | null;
        storageUsed: number | null;
        trialEndsAt: Date | null;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        cancelledAt: Date | null;
        cancelAtPeriodEnd: boolean | null;
        stripeSubscriptionId: string | null;
        stripeCustomerId: string | null;
        monthsSubscribed: number | null;
        totalRevenue: string | null;
        createdAt: Date;
        updatedAt: Date;
    };
    plan: {
        id: string;
        name: string;
        slug: string;
        description: string | null;
        planType: "free" | "individual" | "professional" | "leader" | "institutional" | "enterprise";
        priceMonthly: string | null;
        priceAnnual: string | null;
        currency: string | null;
        contentAccessLevel: "free" | "leader" | "premium" | "vip" | "all";
        features: {
            contentLimit?: number | null;
            aiInteractions: number;
            communityAccess: boolean;
            collaborationTools: boolean;
            analytics: boolean;
            customBranding: boolean;
            apiAccess: boolean;
            prioritySupport: boolean;
            downloadContent: boolean;
            offlineAccess: boolean;
        };
        maxUsers: number | null;
        storageLimit: number | null;
        bandwidthLimit: number | null;
        stripeProductId: string | null;
        stripePriceIdMonthly: string | null;
        stripePriceIdAnnual: string | null;
        isActive: boolean | null;
        isPopular: boolean | null;
        sortOrder: number | null;
        trialDays: number | null;
        createdAt: Date;
        updatedAt: Date;
    } | null;
    leaderProfile: {
        id: string;
        displayName: string | null;
    } | null;
} | null>;
export declare function getSubscriptionByStripeId(stripeSubscriptionId: string): Promise<{
    id: string;
    userId: string;
    planId: string;
    leaderProfileId: string | null;
    organizationId: string | null;
    status: "active" | "cancelled" | "past_due" | "unpaid" | "trialing" | "paused";
    amount: string;
    currency: string | null;
    billingCycle: "monthly" | "annual";
    aiInteractionsUsed: number | null;
    aiInteractionsLimit: number | null;
    storageUsed: number | null;
    trialEndsAt: Date | null;
    currentPeriodStart: Date;
    currentPeriodEnd: Date;
    cancelledAt: Date | null;
    cancelAtPeriodEnd: boolean | null;
    stripeSubscriptionId: string | null;
    stripeCustomerId: string | null;
    monthsSubscribed: number | null;
    totalRevenue: string | null;
    createdAt: Date;
    updatedAt: Date;
} | null>;
export declare function getPublicCommunities(limit?: number): Promise<{
    community: {
        id: string;
        name: string;
        slug: string;
        description: string | null;
        communityType: "general_discussion" | "church_planting_cohort" | "leadership_development" | "theological_study" | "regional_network" | "ministry_focus" | "apest_group";
        geographicFocus: string[] | null;
        culturalContext: "western" | "eastern" | "african" | "latin_american" | "middle_eastern" | "oceanic" | "global" | null;
        languagePrimary: string | null;
        languagesSupported: string[] | null;
        visibility: "organization" | "public" | "private" | "invite_only" | null;
        joinApprovalRequired: boolean | null;
        maxMembers: number | null;
        allowGuestPosts: boolean | null;
        moderationLevel: "open" | "moderated" | "strict" | null;
        currentMemberCount: number | null;
        totalPostsCount: number | null;
        guidelines: string | null;
        rules: string[] | null;
        createdBy: string;
        moderators: string[] | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    };
    creator: {
        displayName: string;
        avatarUrl: string;
    } | null;
}[]>;
export declare function getUserCommunities(userId: string): Promise<{
    community: {
        id: string;
        name: string;
        slug: string;
        description: string | null;
        communityType: "general_discussion" | "church_planting_cohort" | "leadership_development" | "theological_study" | "regional_network" | "ministry_focus" | "apest_group";
        geographicFocus: string[] | null;
        culturalContext: "western" | "eastern" | "african" | "latin_american" | "middle_eastern" | "oceanic" | "global" | null;
        languagePrimary: string | null;
        languagesSupported: string[] | null;
        visibility: "organization" | "public" | "private" | "invite_only" | null;
        joinApprovalRequired: boolean | null;
        maxMembers: number | null;
        allowGuestPosts: boolean | null;
        moderationLevel: "open" | "moderated" | "strict" | null;
        currentMemberCount: number | null;
        totalPostsCount: number | null;
        guidelines: string | null;
        rules: string[] | null;
        createdBy: string;
        moderators: string[] | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    };
    membership: {
        id: string;
        userId: string;
        communityId: string;
        role: "owner" | "admin" | "member" | "moderator" | null;
        status: "active" | "inactive" | "pending" | "banned" | "left" | null;
        postsCount: number | null;
        commentsCount: number | null;
        lastActiveAt: Date | null;
        emailNotifications: boolean | null;
        pushNotifications: boolean | null;
        joinedAt: Date | null;
        approvedAt: Date | null;
        leftAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    };
}[]>;
export declare function getUserAIConversations(userId: string, limit?: number): Promise<{
    id: string;
    userId: string;
    conversationType: "theological_discussion" | "content_creation" | "assessment_guidance" | "ministry_advice" | "leadership_coaching" | "content_discovery" | "research_assistance" | "general";
    title: string | null;
    primaryTopic: string | null;
    theologicalContext: {
        themes: string[];
        scriptures: string[];
        traditions: string[];
    } | null;
    userApestProfile: {
        primary: string;
        secondary: string;
        scores: Record<string, number>;
    } | null;
    ministryContext: {
        role: string;
        experience: number;
        focus_areas: string[];
    } | null;
    culturalContext: string | null;
    totalMessages: number | null;
    conversationDurationMinutes: number | null;
    userSatisfactionRating: number | null;
    theologicalAccuracyVerified: boolean | null;
    helpfulnessRating: number | null;
    aiModel: string | null;
    modelVersion: string | null;
    totalTokensUsed: number | null;
    referencedContent: string[] | null;
    generatedInsights: string | null;
    status: "active" | "archived" | "completed" | "abandoned" | null;
    createdAt: Date;
    updatedAt: Date;
    completedAt: Date | null;
}[]>;
export declare function trackUserEvent(eventData: {
    userId?: string;
    eventType: string;
    eventAction: string;
    eventLabel?: string;
    contentId?: string;
    properties?: Record<string, unknown>;
}): Promise<void>;
export declare function getLeaderDashboardData(userId: string): Promise<{
    contentStats: {
        totalContent: number;
        publishedContent: number;
        totalViews: number;
    };
    subscriptionStats: {
        totalSubscribers: number;
        activeSubscribers: number;
    };
    recentActivity: {
        id: string;
        userId: string | null;
        eventType: "search" | "page_view" | "content_view" | "content_interaction" | "assessment_start" | "assessment_complete" | "ai_conversation" | "community_post" | "subscription_event" | "error";
        eventCategory: string | null;
        eventAction: string;
        eventLabel: string | null;
        pageUrl: string | null;
        referrer: string | null;
        userAgent: string | null;
        ipAddress: string | null;
        contentId: string | null;
        contentType: string | null;
        leaderProfileId: string | null;
        sessionId: string | null;
        sessionDuration: number | null;
        timeOnPage: number | null;
        scrollDepth: number | null;
        clickCount: number | null;
        apestProfile: {
            primary: string;
            scores: Record<string, number>;
        } | null;
        ministryContext: {
            role: string;
            experience: number;
        } | null;
        utmSource: string | null;
        utmMedium: string | null;
        utmCampaign: string | null;
        utmTerm: string | null;
        utmContent: string | null;
        deviceType: "other" | "desktop" | "tablet" | "mobile" | null;
        browserName: string | null;
        operatingSystem: string | null;
        screenResolution: string | null;
        country: string | null;
        region: string | null;
        city: string | null;
        timezone: string | null;
        properties: Record<string, any> | null;
        createdAt: Date;
    }[];
}>;
export declare function getUserOrganizations(userId: string): Promise<{
    organization: any;
    membership: any;
}[]>;
export declare function logAuditEvent(eventData: {
    userId?: string;
    action: string;
    resource: string;
    resourceId?: string;
    riskLevel?: 'low' | 'medium' | 'high' | 'critical';
    oldValues?: Record<string, unknown>;
    newValues?: Record<string, unknown>;
    ipAddress?: string;
    userAgent?: string;
}): Promise<void>;
export declare function getRecentAuditLogs(limit?: number): Promise<{
    log: {
        id: string;
        userId: string | null;
        action: string;
        resource: string;
        resourceId: string | null;
        riskLevel: "medium" | "low" | "high" | "critical" | null;
        oldValues: Record<string, any> | null;
        newValues: Record<string, any> | null;
        ipAddress: string | null;
        userAgent: string | null;
        sessionId: string | null;
        requestId: string | null;
        endpoint: string | null;
        httpMethod: string | null;
        metadata: Record<string, any> | null;
        authenticationMethod: string | null;
        permissions: string[] | null;
        createdAt: Date;
    };
    user: {
        displayName: string;
        email: string;
    } | null;
}[]>;
export declare function getTeamByStripeCustomerId(_customerId: string): Promise<null>;
export declare function updateTeamSubscription(_teamId: number, _subscriptionData: unknown): Promise<null>;
export declare function getUserWithTeam(_userId: number): Promise<null>;
export declare function getActivityLogs(): Promise<{
    log: {
        id: string;
        userId: string | null;
        action: string;
        resource: string;
        resourceId: string | null;
        riskLevel: "medium" | "low" | "high" | "critical" | null;
        oldValues: Record<string, any> | null;
        newValues: Record<string, any> | null;
        ipAddress: string | null;
        userAgent: string | null;
        sessionId: string | null;
        requestId: string | null;
        endpoint: string | null;
        httpMethod: string | null;
        metadata: Record<string, any> | null;
        authenticationMethod: string | null;
        permissions: string[] | null;
        createdAt: Date;
    };
    user: {
        displayName: string;
        email: string;
    } | null;
}[]>;
export declare function getTeamForUser(): Promise<any>;
//# sourceMappingURL=queries.d.ts.map
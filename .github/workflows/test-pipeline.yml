name: Test Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']
        test-type: ['unit', 'integration', 'api', 'ui']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build packages
        run: pnpm packages:build

      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              pnpm vitest run __tests__/unit/ --reporter=verbose
              ;;
            "integration")
              pnpm vitest run __tests__/integration/ --reporter=verbose
              ;;
            "api")
              pnpm vitest run __tests__/api/ --reporter=verbose
              ;;
            "ui")
              pnpm vitest run __tests__/ui/ --reporter=verbose
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  coverage-report:
    runs-on: ubuntu-latest
    needs: test-matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build packages
        run: pnpm packages:build

      - name: Run full test suite with coverage
        run: pnpm test:coverage

      - name: Generate coverage report
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Overall | $(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')% |" >> $GITHUB_STEP_SUMMARY
          echo "| Branches | $(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')% |" >> $GITHUB_STEP_SUMMARY
          echo "| Functions | $(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')% |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines | $(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')% |" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    needs: test-matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build packages
        run: pnpm packages:build

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          time pnpm vitest run __tests__/ --reporter=verbose --coverage

      - name: Check test performance
        run: |
          # Check if tests complete within reasonable time (5 minutes)
          timeout 300 pnpm vitest run __tests__/ --reporter=verbose
          echo "✅ All tests completed within 5 minutes"

  security-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for security vulnerabilities in tests
        run: |
          # Check for hardcoded secrets in test files
          if grep -r "password\|secret\|key\|token" __tests__/ --include="*.ts" --include="*.tsx" | grep -v "test\|mock\|example"; then
            echo "❌ Potential hardcoded secrets found in test files"
            exit 1
          fi
          echo "✅ No hardcoded secrets found in test files"

  test-notifications:
    runs-on: ubuntu-latest
    needs: [test-matrix, coverage-report, performance-tests, security-tests]
    if: always()

    steps:
      - name: Notify test results
        run: |
          if [ "${{ needs.test-matrix.result }}" == "success" ] && [ "${{ needs.coverage-report.result }}" == "success" ] && [ "${{ needs.performance-tests.result }}" == "success" ] && [ "${{ needs.security-tests.result }}" == "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. Check the logs for details."
            exit 1
          fi
